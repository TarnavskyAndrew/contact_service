{
	"info": {
		"_postman_id": "ecdea91f-b7de-4621-8768-957f984464f2",
		"name": "contact_service_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13840346"
	},
	"item": [
		{
			"name": "Healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('[Healthcheck] OK', function () {",
							"   pm.response.to.have.status(200);",
							"   var json = pm.response.json();",
							"   pm.expect(json.status).to.eql('ok');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Do not perform automatic token refresh - false\r",
							"// In the following requests, perform an automatic token refresh - true\r",
							"pm.environment.set(\"auto_refresh\", \"false\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/system/health/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"system",
						"health",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/api/admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[invalid_endpoint] Invalid endpoint /api/admin returns 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 404);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Not Found\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/admin\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"GET\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/admin",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"userEmail\", \"test@email.com\");\r",
							"\r",
							"// \"{{userPassword}}\"\r",
							"pm.environment.set(\"userPassword\", \"MySecretPass123\");\r",
							"\r",
							"\r",
							"// Do not perform automatic token refresh - false\r",
							"// In the following requests, perform an automatic token refresh - true\r",
							"pm.environment.set(\"auto_refresh\", \"false\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// \"{{user_email}}\"\r",
							"// let jsonData = pm.response.json();\r",
							"// if (jsonData.user && jsonData.user.email) {\r",
							"//     pm.environment.set(\"user_email\", jsonData.user.email);\r",
							"// }\r",
							"\r",
							"\r",
							"pm.test(\"[signup] Status code is 201 Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"[signup] Response has correct structure\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"user\");\r",
							"    pm.expect(jsonData).to.have.property(\"detail\", \"User created. Check your email.\");\r",
							"});\r",
							"\r",
							"pm.test(\"[signup] User object has required fields\", function () {\r",
							"    let user = pm.response.json().user;\r",
							"    pm.expect(user).to.have.property(\"id\");\r",
							"    pm.expect(user).to.have.property(\"username\");\r",
							"    pm.expect(user).to.have.property(\"email\");\r",
							"    pm.expect(user).to.have.property(\"created_at\");\r",
							"    pm.expect(user).to.have.property(\"avatar\");\r",
							"    pm.expect(user).to.have.property(\"role\");\r",
							"    pm.expect(user).to.have.property(\"confirmed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[signup] User fields have correct types\", function () {\r",
							"    let user = pm.response.json().user;\r",
							"    pm.expect(user.id).to.be.a(\"number\");\r",
							"    pm.expect(user.username).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(user.email).to.be.a(\"string\").and.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    pm.expect(user.created_at).to.be.a(\"string\");\r",
							"    pm.expect(user.role).to.eql(\"user\");   // default value user\r",
							"    pm.expect(user.confirmed).to.eql(false); // default value false\r",
							"    pm.expect(user.avatar === null || typeof user.avatar === \"string\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"[signup] Save user id and email to environment\", function () {\r",
							"    let user = pm.response.json().user;\r",
							"    \r",
							"    pm.environment.set(\"signup_user_id\", user.id);\r",
							"    pm.environment.set(\"user_email\", user.email);\r",
							"    // \"{{userPassword}}\" -> in Pre-request\r",
							"\r",
							"    console.log(\"Saved signup user data:\", user.email);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Response does not contain error\", function () {\r",
							"//     pm.expect(jsonData).to.not.have.property(\"error\");\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Status code is 409 Conflict\", function () {\r",
							"//     pm.response.to.have.status(409);\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - duplicate email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let email = pm.environment.get(\"user_email\");",
							"pm.test(`[signup_duplicate_emeil] Duplicate email signup fails : ${email}`, function () {",
							"  pm.response.to.have.status(409);",
							"});",
							"",
							"",
							"pm.test(\"[signup_duplicate_emeil] Duplicate email rejected\", function () {",
							"    pm.response.to.have.status(409);",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.error.message).to.match(/already exists/i);",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test\",\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{userPassword}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - Invalid email format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[signup_invalid_email] Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"[signup_invalid_email] Error structure is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.error).to.have.property(\"details\");",
							"});",
							"",
							"pm.test(\"[signup_invalid_email] Error details point to email field\", function () {",
							"    let details = pm.response.json().error.details[0];",
							"",
							"    pm.expect(details.loc).to.eql([\"body\", \"email\"]);",
							"    pm.expect(details.msg).to.match(/invalid email format/i);",
							"    pm.expect(details.type).to.eql(\"value_error\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"// pm.test(\"[signup] Invalid email rejected\", function () {",
							"//     pm.response.to.have.status(422);",
							"//     let jsonData = pm.response.json();",
							"//     pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"email\"]);",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test\",\n  \"email\": \"test_email\",\n  \"password\": \"{{userPassword}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - too_short email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[signup_too_short_email] Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"[signup_too_short_email] Error structure is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.error).to.have.property(\"details\");",
							"});",
							"",
							"pm.test(\"[signup_too_short_email] Error details point to email field\", function () {",
							"    let details = pm.response.json().error.details[0];",
							"",
							"    pm.expect(details.loc).to.eql([\"body\", \"email\"]);",
							"    pm.expect(details.msg).to.match(/email too short/i);",
							"    pm.expect(details.type).to.eql(\"value_error\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"// pm.test(\"[signup] Invalid email rejected\", function () {",
							"//     pm.response.to.have.status(422);",
							"//     let jsonData = pm.response.json();",
							"//     pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"email\"]);",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test\",\n  \"email\": \"t@s.c\",\n  \"password\": \"{{userPassword}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - empty pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[signup_empty_password] Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"[signup_empty_password] Error structure is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.error).to.have.property(\"details\");",
							"});",
							"",
							"pm.test(\"[signup_empty_password] Error details point to password field\", function () {",
							"    let details = pm.response.json().error.details[0];",
							"",
							"    pm.expect(details.loc).to.eql([\"body\", \"password\"]);",
							"    pm.expect(details.msg).to.match(/string should have at least 6 characters/i);",
							"    pm.expect(details.type).to.eql(\"string_too_short\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - invalid pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[signup_invalid_password] Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"[signup_invalid_password] Error structure is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.error).to.have.property(\"details\");",
							"});",
							"",
							"pm.test(\"[signup_invalid_password] Error details point to password field\", function () {",
							"    let details = pm.response.json().error.details[0];",
							"",
							"    pm.expect(details.loc).to.eql([\"body\", \"password\"]);",
							"    pm.expect(details.msg).to.match(/string should have at least 6 characters/i);",
							"    pm.expect(details.type).to.eql(\"string_too_short\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"test\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"12345\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - empty username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[signup_empty_username] Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"[signup_empty_username] Error structure is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.error).to.have.property(\"details\");",
							"});",
							"",
							"pm.test(\"[signup_empty_username] Error details point to username field\", function () {",
							"    let details = pm.response.json().error.details[0];",
							"",
							"    pm.expect(details.loc).to.eql([\"body\", \"username\"]);",
							"    pm.expect(details.msg).to.match(/at least 2 characters/i);",
							"    pm.expect(details.type).to.eql(\"string_too_short\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"123456\"\n}\n\n"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "signup - invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[signup_invalid_username] Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"[signup_invalid_username] Error structure is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/signup\");",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");",
							"    pm.expect(jsonData.error).to.have.property(\"details\");",
							"});",
							"",
							"pm.test(\"[signup_invalid_username] Error details point to username field\", function () {",
							"    let details = pm.response.json().error.details[0];",
							"",
							"    pm.expect(details.loc).to.eql([\"body\", \"username\"]);",
							"    pm.expect(details.msg).to.match(/at least 2 characters/i);",
							"    pm.expect(details.type).to.eql(\"string_too_short\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"t\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"123456\"\n}\n\n"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "resend_confirm_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[resend_confirm_email] Status is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"[resend_confirm_email] Response structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Confirmation email resent. Check your inbox.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{user_email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/resend_confirm_email",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"resend_confirm_email"
					]
				}
			},
			"response": []
		},
		{
			"name": "confirmed_email - expired token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[confirm_email_expired_token] Expired token rejected\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // pm.expect(jsonData.error.path).to.match(/\\/api\\/auth\\/confirmed_email\\//);\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/auth/confirmed_email/\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"GET\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.message).to.match(/token expired/i);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/auth/confirmed_email/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJlbWFpbF92ZXJpZnkiLCJleHAiOjE3NTg5ODY4MzEsImlhdCI6MTc1ODkwMDQzMSwianRpIjoiNzUyMjBhNTUtOGE1NC00MzMxLWFjMTktNzE3M2FkNWYyZjNiIn0.p5KSR6f3RVQg7nIdsWCzB3QPGW8hkQKbLV-e1oNB8e4",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"auth",
						"confirmed_email",
						"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJlbWFpbF92ZXJpZnkiLCJleHAiOjE3NTg5ODY4MzEsImlhdCI6MTc1ODkwMDQzMSwianRpIjoiNzUyMjBhNTUtOGE1NC00MzMxLWFjMTktNzE3M2FkNWYyZjNiIn0.p5KSR6f3RVQg7nIdsWCzB3QPGW8hkQKbLV-e1oNB8e4"
					]
				}
			},
			"response": []
		},
		{
			"name": "confirmed_email - invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[confirm_email_invalid_token] Expired token rejected\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // pm.expect(jsonData.error.path).to.match(/\\/api\\/auth\\/confirmed_email\\//);\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/auth/confirmed_email/\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"GET\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.message).to.match(/invalid token/i);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/auth/confirmed_email/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJlbWF1NC00MzMxLWFjMTktNzE3M2FkNWYyZjNiIn0.p5KSR6f3RVQg7nIdsWCzB3QPGW8hkQKbLV-e1oNB8e4",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"auth",
						"confirmed_email",
						"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJlbWF1NC00MzMxLWFjMTktNzE3M2FkNWYyZjNiIn0.p5KSR6f3RVQg7nIdsWCzB3QPGW8hkQKbLV-e1oNB8e4"
					]
				}
			},
			"response": []
		},
		{
			"name": "confirmed_email - request reset_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[confirmed_email - reset_password] Wrong method returns 405\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(405);\r",
							"    pm.expect(jsonData.error.message).to.match(/method not allowed/i);\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/auth/reset_password/\");\r",
							"    pm.expect(jsonData.error.method).to.eql(\"GET\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/auth/reset_password/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJyZXNldF9wYXNzd29yZCIsImV4cCI6MTc1OTE2NDU5MX0.nw9eDV88U-YzxOwCCiwNYe-JT47mpj2cmg5jey_lTqA",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"auth",
						"reset_password",
						"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJyZXNldF9wYXNzd29yZCIsImV4cCI6MTc1OTE2NDU5MX0.nw9eDV88U-YzxOwCCiwNYe-JT47mpj2cmg5jey_lTqA"
					]
				}
			},
			"response": []
		},
		{
			"name": "get token_confirm - MAILTRAP_INBOX",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"const MAX_RETRIES = 5;   // максимум попыток\r",
							"const DELAY = 5000;      // 5 секунд между попытками\r",
							"let attempt = 0;\r",
							"\r",
							"function checkMailtrap() {\r",
							"    attempt++;\r",
							"    console.log(`>>> Mailtrap check attempt ${attempt}`);\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"        method: \"GET\",\r",
							"        header: {\r",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err || res.code !== 200) {\r",
							"            console.warn(\"Mailtrap error:\", err || res.code);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        let messages = res.json();\r",
							"        let filtered = messages.filter(m =>\r",
							"            m.to_email === userEmail && m.subject.includes(\"Confirm your email\")\r",
							"        );\r",
							"\r",
							"        if (filtered.length > 0) {\r",
							"            let msg = filtered[0];\r",
							"            console.log(\"Found confirm email for:\", userEmail, \"msgId:\", msg.id);\r",
							"\r",
							"            // --- Достаём тело письма ---\r",
							"            pm.sendRequest({\r",
							"                url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msg.id}/body.html`,\r",
							"                method: \"GET\",\r",
							"                header: {\r",
							"                    \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"                }\r",
							"            }, function (err2, res2) {\r",
							"                if (!err2 && res2.code === 200) {\r",
							"                    let html = res2.text();\r",
							"                    let match = html.match(/confirmed_email\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"                    if (match) {\r",
							"                        let token = match[1];\r",
							"                        pm.environment.set(\"confirm_token\", token);\r",
							"                        console.log(\">>> Confirm token saved:\", token);\r",
							"                    }\r",
							"                }\r",
							"            });\r",
							"        } else if (attempt < MAX_RETRIES) {\r",
							"            console.log(`No email yet, retrying in ${DELAY/1000} sec...`);\r",
							"            setTimeout(checkMailtrap, DELAY);\r",
							"        } else {\r",
							"            console.warn(\"No confirmation email found for:\", userEmail, \"after\", MAX_RETRIES, \"attempts\");\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"// --- запуск первой попытки ---\r",
							"checkMailtrap();\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"// pm.sendRequest({\r",
							"//     url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"//     method: \"GET\",\r",
							"//     header: {\r",
							"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//     }\r",
							"// }, function (err, res) {\r",
							"    \r",
							"//     pm.test(\"[pre_mailtrap_token_conf_email] Mailtrap API responded with 200\", function () {\r",
							"//         pm.expect(res.code).to.eql(200);\r",
							"//     });\r",
							"\r",
							"//     if (!err && res.code === 200) {\r",
							"//         let messages = res.json();\r",
							"\r",
							"\r",
							"\r",
							"//         // --- Фильтруем письма по email и теме ---\r",
							"//         let filtered = messages.filter(m =>\r",
							"//             m.to_email === userEmail && m.subject.includes(\"Confirm your email\")\r",
							"//         );\r",
							"\r",
							"//         pm.test(\"[pre_mailtrap_token_conf_email] At least one confirmation email found\", function () {\r",
							"//             pm.expect(filtered.length).to.be.above(0);\r",
							"//         });\r",
							"\r",
							"//         if (filtered.length > 0) {\r",
							"//             let msg = filtered[0];\r",
							"//             console.log(\"Found confirm email for:\", userEmail, \"msgId:\", msg.id);\r",
							"\r",
							"\r",
							"//             pm.test(\"[pre_mailtrap_token_conf_email] Subject is correct\", function () {\r",
							"//                 pm.expect(msg.subject).to.eql(\"Confirm your email\");\r",
							"//             });\r",
							"\r",
							"\r",
							"\r",
							"//             // --- Достаем тело письма ---\r",
							"//             pm.sendRequest({\r",
							"//                 url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msg.id}/body.html`,\r",
							"//                 method: \"GET\",\r",
							"//                 header: {\r",
							"//                     \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//                 }\r",
							"//             }, function (err2, res2) {\r",
							"                \r",
							"//                 pm.test(\"[pre_mailtrap_token_conf_email] Mailtrap message body fetched\", function () {\r",
							"//                     pm.expect(res2.code).to.eql(200);\r",
							"//                 });\r",
							"\r",
							"//                 if (!err2 && res2.code === 200) {\r",
							"//                     let html = res2.text();\r",
							"//                     let match = html.match(/confirmed_email\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"\r",
							"//                     pm.test(\"[pre_mailtrap_token_conf_email] Confirm token exists in body\", function () {\r",
							"//                         pm.expect(match).to.not.be.null;\r",
							"//                     });\r",
							"\r",
							"//                     if (match) {\r",
							"//                         let token = match[1];\r",
							"//                         pm.environment.set(\"confirm_token\", token);\r",
							"\r",
							"//                         pm.test(`[pre_mailtrap_token_conf_email] Confirm token saved --->> ${token.substring(0, 25)}...`, function () {\r",
							"//                             pm.expect(pm.environment.get(\"confirm_token\")).to.eql(token);\r",
							"//                         });\r",
							"//                     }\r",
							"//                 }\r",
							"//             });\r",
							"//         } else {\r",
							"//             console.warn(\"No confirmation email found for:\", userEmail);\r",
							"//         }\r",
							"//     }\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"// pm.sendRequest({\r",
							"//     url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"//     method: \"GET\",\r",
							"//     header: {\r",
							"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//     }\r",
							"// }, function (err, res) {\r",
							"//     if (!err && res.code === 200) {\r",
							"//         let messages = res.json();\r",
							"\r",
							"//         // filtered by email and subject containing \"Confirm your email\"\r",
							"//         let filtered = messages.filter(m => \r",
							"//             m.to_email === userEmail && m.subject.includes(\"Confirm your email\")\r",
							"//         );\r",
							"\r",
							"//         // get the first message that matches the criteria\r",
							"//         if (filtered.length > 0) {\r",
							"//             let msgId = filtered[0].id;\r",
							"//             console.log(\"Found confirm email for:\", userEmail, \"msgId:\", msgId);\r",
							"\r",
							"//             // email by ID\r",
							"//             pm.sendRequest({\r",
							"//                 url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msgId}/body.html`,\r",
							"//                 method: \"GET\",\r",
							"//                 header: {\r",
							"//                     \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//                 }\r",
							"//             }, function (err2, res2) {\r",
							"//                 if (!err2 && res2.code === 200) {\r",
							"//                     let html = res2.text();\r",
							"//                     let match = html.match(/confirmed_email\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"//                     if (match) {\r",
							"//                         let token = match[1];\r",
							"//                         pm.environment.set(\"confirm_token\", token);\r",
							"\r",
							"//                         let conf_token = pm.environment.get(\"confirm_token\");\r",
							"//                         pm.test(`[pre_mailtrap_token_conf_email] Confirm token saved to environment -->> ${conf_token}`, function () {\r",
							"//                             console.log(\"Confirm token saved:\", token);\r",
							"//                         });\r",
							"//                     }\r",
							"//                 }\r",
							"//             });\r",
							"//         } else {\r",
							"//             console.warn(\"No confirm email found for:\", userEmail);\r",
							"//         }\r",
							"//     }\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --- Parse response once ---\r",
							"let messages = pm.response.json();\r",
							"\r",
							"// --- Basic checks ---\r",
							"pm.test(\"[mailtrap_token_conf_email] Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"[mailtrap_token_conf_email] Response is an array\", function () {\r",
							"    pm.expect(messages).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"[mailtrap_token_conf_email] At least one message exists\", function () {\r",
							"    pm.expect(messages.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// --- Freshness check ---\r",
							"pm.test(\"[mailtrap_token_conf_email] Latest message is not too old\", function () {\r",
							"    if (messages.length > 0) {\r",
							"        let msg = messages[0];\r",
							"        let createdAt = new Date(msg.created_at);\r",
							"        let now = new Date();\r",
							"        let diffMinutes = (now - createdAt) / (1000 * 60);\r",
							"        pm.expect(diffMinutes).to.be.below(10);\r",
							"    }\r",
							"});\r",
							"\r",
							"// --- Message details ---\r",
							"if (messages.length > 0) {\r",
							"    let msg = messages[0];\r",
							"\r",
							"    pm.test(\"[mailtrap_token_conf_email] Message has required fields\", function () {\r",
							"        pm.expect(msg).to.have.property(\"id\");\r",
							"        pm.expect(msg).to.have.property(\"subject\");\r",
							"        pm.expect(msg).to.have.property(\"from_email\");\r",
							"        pm.expect(msg).to.have.property(\"to_email\");\r",
							"        pm.expect(msg).to.have.property(\"created_at\");\r",
							"    });\r",
							"\r",
							"    pm.test(\"[mailtrap_token_conf_email] Message is sent from Contacts API\", function () {\r",
							"        pm.expect(msg.from_email).to.match(/texohab821@lanipe.com/); // from project .env\r",
							"    });\r",
							"\r",
							"    pm.test(\"[mailtrap_token_conf_email] to_email matches signup user_email\", function () {\r",
							"        let expectedEmail = pm.environment.get(\"user_email\");\r",
							"        pm.expect(msg.to_email).to.eql(expectedEmail);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"[mailtrap_token_conf_email] Messages have required fields\", function () {\r",
							"//     let data = pm.response.json();\r",
							"//     if (data.length > 0) {\r",
							"//         let msg = data[0];\r",
							"//         pm.expect(msg).to.have.property(\"id\");\r",
							"//         pm.expect(msg).to.have.property(\"subject\");\r",
							"//         pm.expect(msg).to.have.property(\"from_email\");\r",
							"//         pm.expect(msg).to.have.property(\"to_email\");\r",
							"//         pm.expect(msg).to.have.property(\"created_at\");\r",
							"//     }\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{MAILTRAP_API_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mailtrap.io/api/accounts/{{MAILTRAP_ACCOUNT_ID}}/inboxes/{{MAILTRAP_INBOX_ID}}/messages",
					"protocol": "https",
					"host": [
						"mailtrap",
						"io"
					],
					"path": [
						"api",
						"accounts",
						"{{MAILTRAP_ACCOUNT_ID}}",
						"inboxes",
						"{{MAILTRAP_INBOX_ID}}",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "confirmed_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[confirm_email] Status 200 when token valid\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.match(/email confirmed/i);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/confirmed_email/{{confirm_token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"confirmed_email",
						"{{confirm_token}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "confirmed_email - again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[confirm_email_again] Already confirmed user cannot confirm again\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.match(/email is already confirmed/i);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // Do not perform automatic token refresh - false\r",
							"// // In the following requests, perform an automatic token refresh - true\r",
							"// pm.environment.set(\"auto_refresh\", \"true\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/confirmed_email/{{confirm_token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"confirmed_email",
						"{{confirm_token}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Save the old token values ​​(if any)\r",
							"pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// /**\r",
							"//  * Pre-request for LOGIN\r",
							"//  *\r",
							"//  * - Saves old tokens (if any) before login\r",
							"//  * - Inserts email + password into body\r",
							"//  */\r",
							"\r",
							"\r",
							"// // Save old tokens for comparison\r",
							"// pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"// pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							"// // Safety checks\r",
							"// if (!email) {\r",
							"//     console.error(\"❌ user_email not set in environment\");\r",
							"// }\r",
							"// if (!password) {\r",
							"//     console.error(\"❌ userPassword not set in environment\");\r",
							"// }\r",
							"\r",
							"// console.log(\"----- Login pre-request with email:\", email);\r",
							"\r",
							"// // Update body of request\r",
							"// pm.request.body.update(JSON.stringify({\r",
							"//     email: pm.environment.get(\"user_email\"),\r",
							"//     password: pm.environment.get(\"newUserPassword\")\r",
							"// }));\r",
							"\r",
							"// // Content-Type\r",
							"// pm.request.headers.upsert({\r",
							"//     key: \"Content-Type\",\r",
							"//     value: \"application/json\"\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// seve response data to environment variables:\r",
							"// {{access_token}} and {{refresh_token}}\r",
							"let jsonData = pm.response.json();\r",
							"// save tokens and time to environment variables\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);\r",
							"pm.environment.set(\"token_time\", Date.now());\r",
							"\r",
							"console.log(\"Login successful → tokens saved\");\r",
							"\r",
							"\r",
							"// test for successful login response\r",
							"pm.test(\"[first_login] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens present\r",
							"\r",
							"// Access token valid JWT format\r",
							"pm.test(\"[first_login] Access token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"\r",
							"    let parts = jsonData.access_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Access token header is valid base64\r",
							"pm.test(\"[first_login] Access token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let header = jsonData.access_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token valid JWT format\r",
							"pm.test(\"[first_login] Refresh token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"\r",
							"    let parts = jsonData.refresh_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token header is valid base64\r",
							"pm.test(\"[first_login] Refresh token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.refresh_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    \r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: token_type is 'bearer'\r",
							"pm.test(\"[first_login] Token_type is 'bearer'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
							"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: access_token issued\r",
							"pm.test(\"[first_login] Access token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"    pm.expect(jsonData.access_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check: refresh_token issued\r",
							"pm.test(\"[first_login] Refresh token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"    pm.expect(jsonData.refresh_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens updated compared to previous\r",
							"\r",
							"// Check if Access token are updated:\r",
							"let prevAccess = pm.environment.get(\"prev_access_token\");\r",
							"pm.test(\"[first_login] Access token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevAccess, \"prev_access_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevAccess);\r",
							"});\r",
							"\r",
							"\r",
							"// Check if Refresh token are updated:\r",
							"let prevRefresh = pm.environment.get(\"prev_refresh_token\");\r",
							"pm.test(\"[first_login] Refresh token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevRefresh, \"prev_refresh_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevRefresh);\r",
							"});\r",
							"\r",
							"\r",
							"// Check: time updated\r",
							"let tokenTime = parseInt(pm.environment.get(\"token_time\"));\r",
							"pm.test(\"[first_login] Token time is set\", function () {\r",
							"    pm.expect(tokenTime).to.be.a(\"number\");\r",
							"    pm.expect(tokenTime).to.be.closeTo(Date.now(), 2000); // permissible difference is 2 seconds\r",
							"});\r",
							"\r",
							"\r",
							"// Check: response schema\r",
							"const loginResponseSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"access_token\", \"refresh_token\", \"token_type\"],\r",
							"    \"properties\": {\r",
							"        \"access_token\": { \"type\": \"string\" },\r",
							"        \"refresh_token\": { \"type\": \"string\" },\r",
							"        \"token_type\": { \"type\": \"string\", \"enum\": [\"bearer\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"[first_login] Response matches Login Schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(loginResponseSchema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{user_email}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "refresh_token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// seve response data to environment variables:\r",
							"// {{access_token}}, {{refresh_token}} and {{token_time}}\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);\r",
							"pm.environment.set(\"token_time\", Date.now());\r",
							"\r",
							"\r",
							"// test for successful login response\r",
							"pm.test(\"[refresh_token] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Check: Access token updated\r",
							"var prevAccess = pm.environment.get(\"prev_access_token\");\r",
							"pm.test(\"[refresh_token] Access token is updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.access_token).to.not.eql(prevAccess);\r",
							"});\r",
							"pm.environment.set(\"prev_access_token\", jsonData.access_token);\r",
							"\r",
							"\r",
							"// Check: \"Refresh token updated\r",
							"var prevRefresh = pm.environment.get(\"prev_refresh_token\");\r",
							"pm.test(\"[refresh_token] Refresh token is updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevRefresh);\r",
							"});\r",
							"pm.environment.set(\"prev_refresh_token\", jsonData.refresh_token);\r",
							"\r",
							"\r",
							"// Tokens present\r",
							"\r",
							"// Access token valid JWT format\r",
							"pm.test(\"[refresh_token] Access token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"\r",
							"    let parts = jsonData.access_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Access token header is valid base64\r",
							"pm.test(\"[refresh_token] Access token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.access_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"\r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token valid JWT format\r",
							"pm.test(\"[refresh_token] Refresh token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"\r",
							"    let parts = jsonData.refresh_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token header is valid base64\r",
							"pm.test(\"[refresh_token] Refresh token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.refresh_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    \r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: token_type is 'bearer'\r",
							"pm.test(\"[refresh_token] token_type is 'bearer'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
							"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: time updated\r",
							"var tokenTime = parseInt(pm.environment.get(\"token_time\"));\r",
							"pm.test(\"[refresh_token] Token time is set\", function () {\r",
							"    pm.expect(tokenTime).to.be.a(\"number\");\r",
							"    pm.expect(tokenTime).to.be.closeTo(Date.now(), 2000); // permissible difference is 2 seconds\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Save the old token values ​​(if any)\r",
							"pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							"\r",
							"// Do not perform automatic token refresh - false\r",
							"// In the following requests, perform an automatic token refresh - true\r",
							"pm.environment.set(\"auto_refresh\", \"true\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"refresh_token\": \"{{refresh_token}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/refresh_token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"refresh_token"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - empty_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_empty_email] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_empty_email] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_empty_email] Error details point to email field\", function () {\r",
							"    let details = pm.response.json().error.details[0];\r",
							"\r",
							"    pm.expect(details.loc).to.eql([\"body\", \"email\"]);\r",
							"    pm.expect(details.msg).to.match(/not a valid email/i);\r",
							"    pm.expect(details.msg).to.match(/email address must have an @-sign/i); \r",
							"    pm.expect(details.type).to.eql(\"value_error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: response schema\r",
							"const errorSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"error\"],\r",
							"    \"properties\": {\r",
							"        \"error\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\"code\", \"message\", \"path\", \"method\", \"timestamp\"],\r",
							"            \"properties\": {\r",
							"                \"code\": { \"type\": \"integer\" },\r",
							"                \"message\": { \"type\": \"string\" },\r",
							"                \"path\": { \"type\": \"string\" },\r",
							"                \"method\": { \"type\": \"string\" },\r",
							"                \"timestamp\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"                \"details\": { \"type\": [\"array\", \"null\"] }\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"[add_contacts_empty_email] Response schema is valid 422 error\", function () {\r",
							"    pm.response.to.have.jsonSchema(errorSchema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - invalid_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[contacts_invalid_email] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[contacts_invalid_email] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"pm.test(\"[contacts_invalid_email] Error details point to email field\", function () {\r",
							"    let details = pm.response.json().error.details[0];\r",
							"\r",
							"    pm.expect(details.loc).to.eql([\"body\", \"email\"]);\r",
							"    pm.expect(details.msg).to.match(/not a valid email/i);\r",
							"    pm.expect(details.msg).to.match(/email address cannot end with a period/i); \r",
							"    pm.expect(details.type).to.eql(\"value_error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"a2@.\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - pre_dublicate_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// randomPhoneNumber\r",
							"// const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"//\"{{randomPhoneNumber}}\"\r",
							"// Генерация случайного украинского номера телефона\r",
							"const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"const phone = `+380${operator}${number}`;\r",
							"pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"//\"{{randomBirthdayDate}}\"\r",
							"function getRandomDate(start, end) {\r",
							"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"    const yyyy = date.getFullYear();\r",
							"    const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"    const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"    return `${yyyy}-${mm}-${dd}`;\r",
							"}\r",
							"// Пример: дата между 1960-01-01 и 2005-12-31\r",
							"const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"//\"{{randomExtra}}\"\r",
							"// Возможные значения поля \"extra\"\r",
							"const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// Выбираем случайное значение\r",
							"const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// Сохраняем в переменную окружения\r",
							"pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"// --- Bulk create 2 users ---\r",
							"for (let i = 0; i < 2; i++) {\r",
							"    let body = {\r",
							"        first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"        last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"        email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"        phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"        birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"        extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"    };\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\",\r",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: JSON.stringify(body)\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error creating user:\", err);\r",
							"        } else {\r",
							"            console.log(\"User created:\", res.json());\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts] Response has all contact fields\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"// check that the email is in the correct format\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"dublicate_email\", jsonData.email);\r",
							"let email_dubl = pm.environment.get(\"dublicate_email\");\r",
							"\r",
							"pm.test(`[add_contacts] Email is valid -> save email for future tests -> check for duplicates ${email_dubl}`, function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    \r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - dublicate_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let email = pm.environment.get(\"dublicate_email\");\r",
							"pm.test(`[add_contacs_duplicate_emeil] Add duplicate email fails : ${email}`, function () {\r",
							"  pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacs_duplicate_emeil] Duplicate email rejected\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.message).to.match(/already exists/i);\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: response schema\r",
							"const errorSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"error\"],\r",
							"    \"properties\": {\r",
							"        \"error\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\"code\", \"message\", \"path\", \"method\", \"timestamp\"],\r",
							"            \"properties\": {\r",
							"                \"code\": { \"type\": \"integer\" },\r",
							"                \"message\": { \"type\": \"string\" },\r",
							"                \"path\": { \"type\": \"string\" },\r",
							"                \"method\": { \"type\": \"string\" },\r",
							"                \"timestamp\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
							"                \"details\": { \"type\": [\"array\", \"null\"] }\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"[add_contacs_duplicate_emeil] Response schema is valid 409 error\", function () {\r",
							"    pm.response.to.have.jsonSchema(errorSchema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{dublicate_email}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - too_long_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacs_too_long_emeil] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacs_too_long_emeil] Error message is Validation failed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacs_too_long_emeil] Error code is 422\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacs_too_long_emeil] Error details contain email field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"body\", \"email\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"value is not a valid email address: The email address is too long before the @-sign (1 character too many).\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"value_error\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@examplelongdomain12.com\", // 101 (65+36)\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - empty_first_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_first_name_empty] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"// pm.test(\"[add_contacts_first_name_empty] Validation failed message\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_first_name_empty] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_first_name_empty] Error details include first_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"first_name\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should match pattern '^[A-Za-zА-Яа-яЁёІіЇїЄєҐґ][A-Za-zА-Яа-яЁёІіЇїЄєҐґ\\\\-\\\\._']{0,24}$'\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_pattern_mismatch\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - invalid_first_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_invalid_first_name] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"// pm.test(\"[add_contacts_invalid_first_name] Validation failed message\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_first_name] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_first_name] Error details include first_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"first_name\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should match pattern '^[A-Za-zА-Яа-яЁёІіЇїЄєҐґ][A-Za-zА-Яа-яЁёІіЇїЄєҐґ\\\\-\\\\._']{0,24}$'\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_pattern_mismatch\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"$\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - too_long_first_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let longText = \"a\".repeat(26);\r",
							"pm.environment.set(\"long_name\", longText);\r",
							"\r",
							"\r",
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_first_name_too_long] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_first_name_too_long] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_first_name_too_long] Error details include first_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"first_name\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should match pattern '^[A-Za-zА-Яа-яЁёІіЇїЄєҐґ][A-Za-zА-Яа-яЁёІіЇїЄєҐґ\\\\-\\\\._']{0,24}$'\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_pattern_mismatch\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{long_name}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - long_first_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let longText = \"a\".repeat(25);\r",
							"pm.environment.set(\"long_name\", longText);\r",
							"\r",
							"\r",
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts_long_first_name] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts_long_first_name] Response has all contact fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_long_first_name] first_name field length is 25\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name.length).to.eql(25);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_long_first_name] first_name value matches input\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"long_name\"));\r",
							"});\r",
							"\r",
							"\r",
							"// check that the email is in the correct format\r",
							"pm.test(\"[add_contacts_long_first_name] Email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts_long_first_name] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts_long_first_name] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{long_name}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - empty_last_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_last_name_empty] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"// pm.test(\"[add_contacts_last_name_empty] Validation failed message\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_last_name_empty] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_last_name_empty] Error details include last_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"last_name\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should match pattern '^[A-Za-zА-Яа-яЁёІіЇїЄєҐґ][A-Za-zА-Яа-яЁёІіЇїЄєҐґ\\\\-\\\\._']{0,24}$'\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_pattern_mismatch\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - invalid_last_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_invalid_last_name] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"// pm.test(\"[add_contacts_invalid_last_name] Validation failed message\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_last_name] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_last_name] Error details include last_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"last_name\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should match pattern '^[A-Za-zА-Яа-яЁёІіЇїЄєҐґ][A-Za-zА-Яа-яЁёІіЇїЄєҐґ\\\\-\\\\._']{0,24}$'\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_pattern_mismatch\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"$\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - long_last_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let longText = \"a\".repeat(25);\r",
							"pm.environment.set(\"long_name\", longText);\r",
							"\r",
							"\r",
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts_long_last_name] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts_long_last_name] Response has all contact fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_long_last_name] last_name field length is 25\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.last_name.length).to.eql(25);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_long_last_name] last_name value matches input\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"long_name\"));\r",
							"});\r",
							"\r",
							"\r",
							"// check that the email is in the correct format\r",
							"pm.test(\"[add_contacts_long_last_name] Email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts_long_last_name] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts_long_last_name] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{long_name}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - too_long_last_name",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let longText = \"a\".repeat(26);\r",
							"pm.environment.set(\"long_name\", longText);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_invalid_last_name] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"// pm.test(\"[add_contacts_invalid_last_name] Validation failed message\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_last_name] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_last_name] Error details include last_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"last_name\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should match pattern '^[A-Za-zА-Яа-яЁёІіЇїЄєҐґ][A-Za-zА-Яа-яЁёІіЇїЄєҐґ\\\\-\\\\._']{0,24}$'\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_pattern_mismatch\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{long_name}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - empty_phone",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_empty_phone] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_empty_phone] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_empty_phone] Error details include phone\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"phone\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Value error, Phone must contain digits only\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"value_error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - invalid_phone",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_invalid_phone] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_phone] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_phone] Error details include phone\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"phone\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Value error, Ukrainian phone must contain only digits\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"value_error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"+38067555332T\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - too_long_phone_UA",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_phone_too_long_UA] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_phone_too_long_UA] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_phone_too_long_UA] Error details include phone\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"phone\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Value error, Ukrainian phone must be in format +380XXXXXXXXX\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"value_error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"+3806834399551\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - long_phone",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts_long_phone] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts_long_phone] Response has all contact fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"// check that the email is in the correct format\r",
							"pm.test(\"[add_contacts_long_phone] Email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts_long_phone] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts_long_phone] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"+999123456789012\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - too_long_phone",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_phone_too_long] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_phone_too_long] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_phone_too_long] Error details include phone\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"phone\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Value error, Phone must follow E.164 format (+CountryCodeNumber)\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"value_error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"+9991234567890121\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - empty_birthday",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_empty_birthday] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_empty_birthday] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_empty_birthday] Error details include birthday\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"birthday\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Input should be a valid date or datetime, input is too short\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"date_from_datetime_parsing\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - invalid_birthday",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_invalid_birthday] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_birthday] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_invalid_birthday] Error details include birthday\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"birthday\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Input should be a valid date or datetime, invalid character in year\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"date_from_datetime_parsing\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"01-05-1995\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - future_birthday",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_future_birthday] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_future_birthday] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_future_birthday] Error details include birthday\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"birthday\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"Value error, Birthday cannot be in the future\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"value_error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"2030-01-05\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - empty_extra",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts_empty_extra] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts_empty_extra] Response has all contact fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_empty_extra] Extra field is empty string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.extra).to.eql(\"\");\r",
							"});\r",
							"\r",
							"// check that the email is in the correct format\r",
							"pm.test(\"[add_contacts_empty_extra] Email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts_empty_extra] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts_empty_extra] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - long_extra",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let longText = \"a\".repeat(250);\r",
							"pm.environment.set(\"extra_250\", longText);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts_long_extra] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts_long_extra] Response has all contact fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_long_extra] Extra field length is 250\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.extra.length).to.eql(250);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_long_extra] Extra value matches input\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.extra).to.eql(pm.environment.get(\"extra_250\"));\r",
							"});\r",
							"\r",
							"\r",
							"// check that the email is in the correct format\r",
							"pm.test(\"[add_contacts_long_extra] Email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts_long_extra] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts_long_extra] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{extra_250}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts - too_long_extra",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let longText = \"a\".repeat(251);\r",
							"pm.environment.set(\"extra_long\", longText);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_too_long_extra] Status is 422 Validation failed\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_too_long_extra] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_too_long_extra] Error details include extra\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"extra\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"String should have at most 250 characters\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.include(\"string_too_long\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{extra_long}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// randomPhoneNumber\r",
							"// const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"//\"{{randomPhoneNumber}}\"\r",
							"// Генерация случайного украинского номера телефона\r",
							"const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"const phone = `+380${operator}${number}`;\r",
							"pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"//\"{{randomBirthdayDate}}\"\r",
							"function getRandomDate(start, end) {\r",
							"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"    const yyyy = date.getFullYear();\r",
							"    const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"    const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"    return `${yyyy}-${mm}-${dd}`;\r",
							"}\r",
							"// Пример: дата между 1960-01-01 и 2005-12-31\r",
							"const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"//\"{{randomExtra}}\"\r",
							"// Возможные значения поля \"extra\"\r",
							"const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// Выбираем случайное значение\r",
							"const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// Сохраняем в переменную окружения\r",
							"pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"// --- Bulk create 2 users ---\r",
							"for (let i = 0; i < 2; i++) {\r",
							"    let body = {\r",
							"        first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"        last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"        email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"        phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"        birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"        extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"    };\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\",\r",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: JSON.stringify(body)\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error creating user:\", err);\r",
							"        } else {\r",
							"            console.log(\"User created:\", res.json());\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[add_contacts] Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// check that the body of the answer contains all key fields\r",
							"pm.test(\"[add_contacts] Response has all contact fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"phone\");\r",
							"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"    pm.expect(jsonData).to.have.property(\"extra\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"// check that the email is in the correct format\r",
							"pm.test(\"[add_contacts] Email is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[add_contacts] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the id is unique (does not match the previous one)\r",
							"pm.test(\"[add_contacts] Contact ID is unique\", function () { \r",
							"var jsonData = pm.response.json(); \r",
							"var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"if (lastId) { \r",
							"pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"} \r",
							"\r",
							"// save the current id for the next request \r",
							"pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"});\r",
							"\r",
							"\r",
							"const contactSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\"],\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"first_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"last_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"phone\": { \"type\": \"string\" },\r",
							"        \"birthday\": { \"type\": \"string\", \"pattern\": \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\" },\r",
							"        \"extra\": { \"type\": [\"string\", \"null\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"[add_contacts] Response matches Contact schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(contactSchema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get contacts - output limit=10 (default)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[get_contacts_limit=10] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Contacts list is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Contacts are sorted by ID ascending\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (let i = 1; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// check that the last created contact is present and is the latest\r",
							"pm.test(\"[get_contacts_limit=10] Last created contact is present and is the latest\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var lastId = parseInt(pm.environment.get(\"last_contact_id\"));\r",
							"    var lastContact = jsonData[jsonData.length - 1];\r",
							"    pm.expect(lastContact.id).to.eql(lastId);\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[get_contacts_limit=10] Last created contact is present in the page\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     var lastId = parseInt(pm.environment.get(\"last_contact_id\"));\r",
							"\r",
							"//     // id где-то есть в массиве (а не строго в конце)\r",
							"//     let ids = jsonData.map(c => c.id);\r",
							"//     pm.expect(ids).to.include(lastId);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] All contact IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Collect all IDs into an array\r",
							"    var ids = jsonData.map(c => c.id);\r",
							"    // Create a Set (it stores only unique values)\r",
							"    var uniqueIds = new Set(ids);\r",
							"    // Check that the lengths match → no duplicates\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] All required fields are not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, \"Contacts list should not be empty\").to.be.above(0);\r",
							"\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.not.be.empty;\r",
							"        pm.expect(c.last_name).to.not.be.empty;\r",
							"        pm.expect(c.email).to.not.be.empty;\r",
							"        pm.expect(c.phone).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] All contacts have correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.be.a(\"string\");\r",
							"        pm.expect(c.last_name).to.be.a(\"string\");\r",
							"        pm.expect(c.email).to.be.a(\"string\");\r",
							"        pm.expect(c.phone).to.be.a(\"string\");\r",
							"        pm.expect(c.birthday).to.be.a(\"string\");\r",
							"        pm.expect(c.extra).to.be.a(\"string\");\r",
							"        pm.expect(c.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] All phones have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Birthday has valid date format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] All emails have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Status is 200 and returns max 10 contacts\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.at.most(10); // не больше 10\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[get_contacts_limit=10] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Response size under 1MB\", function () {\r",
							"    pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							"// save the current search_name for the next request \r",
							"var jsonData = pm.response.json();\r",
							"// if this is an array, take the first_name of the first contact\r",
							"if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"    pm.environment.set(\"search_name\", jsonData[0].first_name);\r",
							"    console.log(\"Saved search_name:\", jsonData[0].first_name);\r",
							"} else if (jsonData.first_name) {\r",
							"    // if this is a single object\r",
							"    pm.environment.set(\"search_name\", jsonData.first_name);\r",
							"    console.log(\"Saved search_name:\", jsonData.first_name);\r",
							"} else {\r",
							"    console.warn(\"No first_name found in response\");\r",
							"}\r",
							"\r",
							"\r",
							"const contactSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\"],\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"first_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"last_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"phone\": { \"type\": \"string\" },\r",
							"        \"birthday\": { \"type\": \"string\", \"pattern\": \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\" },\r",
							"        \"extra\": { \"type\": [\"string\", \"null\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"const contactsListSchema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": contactSchema\r",
							"};\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Response matches Contact schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(contactsListSchema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "search contacts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[search_contacts] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Check that the name of each contact contains the search string\r",
							"var query = pm.variables.get(\"search_name\"); // get the search query from the environment variables\r",
							"pm.test(\"[search_contacts] Search results match query\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"    });\r",
							"});\r",
							"\r",
							"// The list can be empty, but it should not contain any extra ones\r",
							"pm.test(\"[search_contacts] No irrelevant results\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var query = pm.variables.get(\"search_name\");\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] Contacts are sorted by ID ascending\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (let i = 1; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] All contact IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Collect all IDs into an array\r",
							"    var ids = jsonData.map(c => c.id);\r",
							"    // Create a Set (it stores only unique values)\r",
							"    var uniqueIds = new Set(ids);\r",
							"    // Check that the lengths match → no duplicates\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] All required fields are not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, \"Contacts list should not be empty\").to.be.above(0);\r",
							"\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.not.be.empty;\r",
							"        pm.expect(c.last_name).to.not.be.empty;\r",
							"        pm.expect(c.email).to.not.be.empty;\r",
							"        pm.expect(c.phone).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] All contacts have correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.be.a(\"string\");\r",
							"        pm.expect(c.last_name).to.be.a(\"string\");\r",
							"        pm.expect(c.email).to.be.a(\"string\");\r",
							"        pm.expect(c.phone).to.be.a(\"string\");\r",
							"        pm.expect(c.birthday).to.be.a(\"string\");\r",
							"        pm.expect(c.extra).to.be.a(\"string\");\r",
							"        pm.expect(c.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] All phones have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] Birthday has valid date format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts] All emails have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[search_contacts] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"[search_contacts] Response size under 1MB\", function () {\r",
							"    pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/contacts/search?q={{search_name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "{{search_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search contacts - empty result for inv ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code\r",
							"pm.test(\"[search_contacts_emty_id] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response is array (can be empty)\r",
							"pm.test(\"[search_contacts_emty_id] Response is array (can be empty)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
							"});\r",
							"\r",
							"// Negative search → must return empty array\r",
							"var query = pm.environment.get(\"not_found_contact_id\"); \r",
							"pm.test(\"[search_contacts_emty_id] Search with non-existent name returns empty list\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(0, `Expected empty list for query: ${query}`);\r",
							"});\r",
							"\r",
							"\r",
							"// Performance\r",
							"pm.test(\"[search_contacts_emty_id] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // The list can be empty, but it should not contain any extra ones\r",
							"// pm.test(\"No irrelevant results\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     var query = pm.variables.get(\"search_empty\");\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// // Check that the name of each contact contains the search string\r",
							"// var query = pm.variables.get(\"search_empty\"); // get the search query from the environment variables\r",
							"// pm.test(\"Search results match query\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// // Check: if Date is not empty, validate the fields\r",
							"// pm.test(\"All required fields are not empty\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"\r",
							"//     if (jsonData.length === 0) {\r",
							"//         console.log(\"Response is empty, skipping required fields check\");\r",
							"//         return;\r",
							"//     }\r",
							"\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name, \"first_name should not be empty\").to.not.be.empty;\r",
							"//         pm.expect(c.last_name, \"last_name should not be empty\").to.not.be.empty;\r",
							"//         pm.expect(c.email, \"email should not be empty\").to.not.be.empty;\r",
							"//         pm.expect(c.phone, \"phone should not be empty\").to.not.be.empty;\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"All contacts have correct data types\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"\r",
							"//         if (jsonData.length === 0) {\r",
							"//         console.log(\"Response is empty, skipping required fields check\");\r",
							"//         return;\r",
							"//     }\r",
							"\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name).to.be.a(\"string\");\r",
							"//         pm.expect(c.last_name).to.be.a(\"string\");\r",
							"//         pm.expect(c.email).to.be.a(\"string\");\r",
							"//         pm.expect(c.phone).to.be.a(\"string\");\r",
							"//         pm.expect(c.birthday).to.be.a(\"string\");\r",
							"//         pm.expect(c.extra).to.be.a(\"string\");\r",
							"//         pm.expect(c.id).to.be.a(\"number\");\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"All phones have valid format\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Birthday has valid date format\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"All emails have valid format\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Response size under 1MB\", function () {\r",
							"//     pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/contacts/search?q={{not_found_contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "{{not_found_contact_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search contacts + inv {id=0}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[search_contacts_id=0] Status code is 422 on invalid contact_id\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Error object exists in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let invalid_Int = pm.environment.get(\"invalid_Int\"); // invalid_Int from environment in preflight pre-request\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${invalid_Int}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"GET\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Details object structure is valid\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let detail = jsonData.error.details[0];\r",
							"    pm.expect(detail).to.have.all.keys(\"loc\", \"msg\", \"type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Error details show int greater than equal\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"contact_id\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"greater_than_equal\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Error message in details is present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"msg\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=0] Error type is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.be.oneOf([\"int_parsing\", \"greater_than_equal\"]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_Int\", \"0\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/0",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "search contacts + inv {id=str}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[search_contacts_id=str] Status code is 422 on invalid contact_id\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Error object exists in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let invalidStr = pm.environment.get(\"invalid_Str\"); // invalidStr from environment in preflight pre-request\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${invalidStr}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"GET\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Details object structure is valid\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let detail = jsonData.error.details[0];\r",
							"    pm.expect(detail).to.have.all.keys(\"loc\", \"msg\", \"type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Error details show int parsing issue\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"contact_id\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"int_parsing\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Error message in details is present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"msg\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contacts_id=str] Error type is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.be.oneOf([\"int_parsing\", \"greater_than_equal\"]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_Str\", \"abraCodabra\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{invalid_Str}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{invalid_Str}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "request_reset_password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Check the status code\r",
							"pm.test(\"[reset_password_request] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Check that the response body contains the message field\r",
							"pm.test(\"[reset_password_request] Response has 'message' field\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check that the message matches the expected text\r",
							"pm.test(\"[reset_password_request] Message text is correct\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Check your email for password reset link.\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check the response time (SLA < 1000ms)\r",
							"pm.test(\"[reset_password_request] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// Additionally: check the Content-Type\r",
							"pm.test(\"[reset_password_request] Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{user_email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/request_reset_password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"request_reset_password"
					]
				}
			},
			"response": []
		},
		{
			"name": "request_reset_password - inv_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[reset_password_request_invalid_email] Status is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[reset_password_request_invalid_email] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/request_reset_password\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"pm.test(\"[reset_password_request_invalid_email] Error details point to email field\", function () {\r",
							"    let details = pm.response.json().error.details[0];\r",
							"\r",
							"    pm.expect(details.loc).to.eql([\"body\", \"email\"]);\r",
							"    pm.expect(details.msg).to.match(/not a valid email/i);\r",
							"    pm.expect(details.type).to.eql(\"value_error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"user@\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/request_reset_password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"request_reset_password"
					]
				}
			},
			"response": []
		},
		{
			"name": "request_reset_password - empty_email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[reset_password_request_empty_email] Status is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[reset_password_request_empty_email] Error structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\", \"/api/auth/request_reset_password\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"details\");\r",
							"});\r",
							"\r",
							"pm.test(\"[reset_password_request_empty_email] Error details point to email field\", function () {\r",
							"    let details = pm.response.json().error.details[0];\r",
							"\r",
							"    pm.expect(details.loc).to.eql([\"body\", \"email\"]);\r",
							"    pm.expect(details.msg).to.match(/value is not a valid email address: There must be something after the @-sign/); // Check if the error message contains the @-sign\r",
							"    pm.expect(details.type).to.eql(\"value_error\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"user@\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/request_reset_password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"request_reset_password"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset_password + {expired token}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[reset_password_expired_token] Expired token rejected\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // pm.expect(jsonData.error.path).to.match(/\\/api\\/auth\\/reset_password\\//);\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/auth/reset_password/\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.message).to.match(/token expired/i);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// \"{{newUserPassword}}\"\r",
							"// pm.environment.set(\"newUserPassword\", \"MyNewSecretPass123\");\r",
							"\r",
							"\r",
							"// // Pre-request Script for Reset Password\r",
							"// let newPass = \"SecretPass_\" + Date.now();  // You can use faker/random\r",
							"// pm.environment.set(\"newUserPassword\", newPass);\r",
							"\r",
							"// console.log(\"userPassword updated to new one:\", newPass);\r",
							"\r",
							"\r",
							"// pm.request.body.update(JSON.stringify({\r",
							"//     email: pm.environment.get(\"user_email\"),\r",
							"//     old_password: pm.environment.get(\"userPassword\"),\r",
							"//     new_password: newPass\r",
							"// }));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"new_password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/auth/reset_password/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJyZXNldF9wYXNzd29yZCIsImV4cCI6MTc1OTE2NDU5MX0.nw9eDV88U-YzxOwCCiwNYe-JT47mpj2cmg5jey_lTqA",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"auth",
						"reset_password",
						"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJyZXNldF9wYXNzd29yZCIsImV4cCI6MTc1OTE2NDU5MX0.nw9eDV88U-YzxOwCCiwNYe-JT47mpj2cmg5jey_lTqA"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset_password + {invalid token}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[reset_password_inv_token] Expired token rejected\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // pm.expect(jsonData.error.path).to.match(/\\/api\\/auth\\/reset_password\\//);\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/auth/reset_password/\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.message).to.match(/invalid token/i);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"new_password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/auth/reset_password/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJy",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"auth",
						"reset_password",
						"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJBYmJleTJAeWFob28uY29tIiwic2NvcGUiOiJy"
					]
				}
			},
			"response": []
		},
		{
			"name": "get token_reset - MAILTRAP_INBOX",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"const MAX_RETRIES = 5;   // максимум попыток\r",
							"const DELAY = 5000;      // 5 секунд между попытками\r",
							"let attempt = 0;\r",
							"\r",
							"function checkMailtrap() {\r",
							"    attempt++;\r",
							"    console.log(`>>> Mailtrap check attempt ${attempt}`);\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"        method: \"GET\",\r",
							"        header: {\r",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err || res.code !== 200) {\r",
							"            console.warn(\"Mailtrap error:\", err || res.code);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        let messages = res.json();\r",
							"        let filtered = messages.filter(m =>\r",
							"            m.to_email === userEmail && m.subject.includes(\"Confirm your email\")\r",
							"        );\r",
							"\r",
							"        if (filtered.length > 0) {\r",
							"            let msg = filtered[0];\r",
							"            console.log(\"Found confirm email for:\", userEmail, \"msgId:\", msg.id);\r",
							"\r",
							"            // --- Достаём тело письма ---\r",
							"            pm.sendRequest({\r",
							"                url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msg.id}/body.html`,\r",
							"                method: \"GET\",\r",
							"                header: {\r",
							"                    \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"                }\r",
							"            }, function (err2, res2) {\r",
							"                if (!err2 && res2.code === 200) {\r",
							"                    let html = res2.text();\r",
							"                    let match = html.match(/confirmed_email\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"                    if (match) {\r",
							"                        let token = match[1];\r",
							"                        pm.environment.set(\"confirm_token\", token);\r",
							"                        console.log(\">>> Confirm token saved:\", token);\r",
							"                    }\r",
							"                }\r",
							"            });\r",
							"        } else if (attempt < MAX_RETRIES) {\r",
							"            console.log(`No email yet, retrying in ${DELAY/1000} sec...`);\r",
							"            setTimeout(checkMailtrap, DELAY);\r",
							"        } else {\r",
							"            console.warn(\"No confirmation email found for:\", userEmail, \"after\", MAX_RETRIES, \"attempts\");\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"// --- запуск первой попытки ---\r",
							"checkMailtrap();\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"// pm.sendRequest({\r",
							"//     url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"//     method: \"GET\",\r",
							"//     header: {\r",
							"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//     }\r",
							"// }, function (err, res) {\r",
							"//     pm.test(\"[pre_mailtrap_reset_pass] Mailtrap API responded with 200\", function () {\r",
							"//         pm.expect(res.code).to.eql(200);\r",
							"//     });\r",
							"\r",
							"//     if (!err && res.code === 200) {\r",
							"//         let messages = res.json();\r",
							"\r",
							"//         // --- Фильтруем письма по email и теме ---\r",
							"//         let filtered = messages.filter(m =>\r",
							"//             m.to_email === userEmail && m.subject.includes(\"Reset your password\")\r",
							"//         );\r",
							"\r",
							"//         pm.test(\"[pre_mailtrap_reset_pass] At least one reset email found\", function () {\r",
							"//             pm.expect(filtered.length).to.be.above(0);\r",
							"//         });\r",
							"\r",
							"//         if (filtered.length > 0) {\r",
							"//             let msg = filtered[0];\r",
							"//             console.log(\"Found reset password email for:\", userEmail, \"msgId:\", msg.id);\r",
							"            \r",
							"//             pm.test(\"[pre_mailtrap_reset_pass] Subject is correct\", function () {\r",
							"//                 pm.expect(msg.subject).to.eql(\"Reset your password\");\r",
							"//             });\r",
							"\r",
							"\r",
							"//             // --- Достаём тело письма ---\r",
							"//             pm.sendRequest({\r",
							"//                 url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msg.id}/body.html`,\r",
							"//                 method: \"GET\",\r",
							"//                 header: {\r",
							"//                     \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//                 }\r",
							"//             }, function (err2, res2) {\r",
							"//                 pm.test(\"[pre_mailtrap_reset_pass] Mailtrap message body fetched\", function () {\r",
							"//                     pm.expect(res2.code).to.eql(200);\r",
							"//                 });\r",
							"\r",
							"//                 if (!err2 && res2.code === 200) {\r",
							"//                     let html = res2.text();\r",
							"//                     let match = html.match(/reset_password\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"\r",
							"//                     pm.test(\"[pre_mailtrap_reset_pass] Reset token exists in body\", function () {\r",
							"//                         pm.expect(match).to.not.be.null;\r",
							"//                     });\r",
							"\r",
							"//                     if (match) {\r",
							"//                         let token = match[1];\r",
							"//                         pm.environment.set(\"reset_token\", token);\r",
							"\r",
							"//                         pm.test(`[pre_mailtrap_reset_pass] Reset token saved --->> ${token.substring(0, 25)}...`, function () {\r",
							"//                             pm.expect(pm.environment.get(\"reset_token\")).to.eql(token);\r",
							"//                         });\r",
							"//                     }\r",
							"//                 }\r",
							"//             });\r",
							"//         } else {\r",
							"//             console.warn(\"No reset password email found for:\", userEmail);\r",
							"//         }\r",
							"//     }\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"// pm.sendRequest({\r",
							"//     url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"//     method: \"GET\",\r",
							"//     header: {\r",
							"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//     }\r",
							"// }, function (err, res) {\r",
							"//     if (!err && res.code === 200) {\r",
							"//         let messages = res.json();\r",
							"\r",
							"//         // filtered by email and subject containing \"Reset your password\"\r",
							"//         let filtered = messages.filter(m => \r",
							"//             m.to_email === userEmail && m.subject.includes(\"Reset your password\")\r",
							"//         );\r",
							"\r",
							"//         if (filtered.length > 0) {\r",
							"//             let msgId = filtered[0].id;\r",
							"//             console.log(\"Found reset password email for:\", userEmail, \"msgId:\", msgId);\r",
							"\r",
							"//             // email by ID\r",
							"//             pm.sendRequest({\r",
							"//                 url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msgId}/body.html`,\r",
							"//                 method: \"GET\",\r",
							"//                 header: {\r",
							"//                     \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//                 }\r",
							"//             }, function (err2, res2) {\r",
							"//                 if (!err2 && res2.code === 200) {\r",
							"//                     let html = res2.text();\r",
							"//                     let match = html.match(/reset_password\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"//                     if (match) {\r",
							"//                         let token = match[1];\r",
							"//                         pm.environment.set(\"reset_token\", token);\r",
							"                        \r",
							"//                         let res_token = pm.environment.get(\"reset_token\");\r",
							"//                         pm.test(`[pre_mailtrap_token_reset_pass] Reset token saved to environment -->> ${res_token}`, function () {\r",
							"//                             console.log(\"Confirm token saved:\", token);\r",
							"//                         });\r",
							"//                         // console.log(\"Confirm token saved:\", token);\r",
							"//                     }\r",
							"//                 }\r",
							"//             });\r",
							"//         } else {\r",
							"//             console.warn(\"No reset password email found for:\", userEmail);\r",
							"//         }\r",
							"//     }\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --- Parse response once ---\r",
							"let messages = pm.response.json();\r",
							"\r",
							"// --- Basic checks ---\r",
							"pm.test(\"[mailtrap_token_reset_pass] Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"[mailtrap_token_reset_pass] Response is an array\", function () {\r",
							"    pm.expect(messages).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"[mailtrap_token_reset_pass] At least one message exists\", function () {\r",
							"    pm.expect(messages.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// --- Freshness check ---\r",
							"pm.test(\"[mailtrap_token_reset_pass] Latest message is not too old\", function () {\r",
							"    if (messages.length > 0) {\r",
							"        let msg = messages[0];\r",
							"        let createdAt = new Date(msg.created_at);\r",
							"        let now = new Date();\r",
							"        let diffMinutes = (now - createdAt) / (1000 * 60);\r",
							"        pm.expect(diffMinutes).to.be.below(10);\r",
							"    }\r",
							"});\r",
							"\r",
							"// --- Message details ---\r",
							"if (messages.length > 0) {\r",
							"    let msg = messages[0];\r",
							"\r",
							"    pm.test(\"[mailtrap_token_reset_pass] Message has required fields\", function () {\r",
							"        pm.expect(msg).to.have.property(\"id\");\r",
							"        pm.expect(msg).to.have.property(\"subject\");\r",
							"        pm.expect(msg).to.have.property(\"from_email\");\r",
							"        pm.expect(msg).to.have.property(\"to_email\");\r",
							"        pm.expect(msg).to.have.property(\"created_at\");\r",
							"    });\r",
							"\r",
							"    pm.test(\"[mailtrap_token_reset_pass] Message is sent from Contacts API\", function () {\r",
							"        pm.expect(msg.from_email).to.match(/texohab821@lanipe.com/); // from project .env\r",
							"    });\r",
							"\r",
							"    pm.test(\"[mailtrap_token_reset_pass] to_email matches signup user_email\", function () {\r",
							"        let expectedEmail = pm.environment.get(\"user_email\");\r",
							"        pm.expect(msg.to_email).to.eql(expectedEmail);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"[mailtrap_token_reset_pass] Messages have required fields\", function () {\r",
							"//     let data = pm.response.json();\r",
							"//     if (data.length > 0) {\r",
							"//         let msg = data[0];\r",
							"//         pm.expect(msg).to.have.property(\"id\");\r",
							"//         pm.expect(msg).to.have.property(\"subject\");\r",
							"//         pm.expect(msg).to.have.property(\"from_email\");\r",
							"//         pm.expect(msg).to.have.property(\"to_email\");\r",
							"//         pm.expect(msg).to.have.property(\"created_at\");\r",
							"//     }\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{MAILTRAP_API_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mailtrap.io/api/accounts/{{MAILTRAP_ACCOUNT_ID}}/inboxes/{{MAILTRAP_INBOX_ID}}/messages",
					"protocol": "https",
					"host": [
						"mailtrap",
						"io"
					],
					"path": [
						"api",
						"accounts",
						"{{MAILTRAP_ACCOUNT_ID}}",
						"inboxes",
						"{{MAILTRAP_INBOX_ID}}",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset_password + {token}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"[reset_password] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"[reset_password] Response has success message\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.match(/password reset/i);\r",
							"});\r",
							"\r",
							"pm.test(\"[reset_password] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// \"{{newUserPassword}}\"\r",
							"// pm.environment.set(\"newUserPassword\", \"MyNewSecretPass123\");\r",
							"\r",
							"\r",
							"// Pre-request Script for Reset Password\r",
							"let newPass = \"SecretPass_\" + Date.now();  // You can use faker/random\r",
							"pm.environment.set(\"newUserPassword\", newPass);\r",
							"\r",
							"console.log(\"userPassword updated to new one:\", newPass);\r",
							"\r",
							"\r",
							"// pm.request.body.update(JSON.stringify({\r",
							"//     email: pm.environment.get(\"user_email\"),\r",
							"//     old_password: pm.environment.get(\"userPassword\"),\r",
							"//     new_password: newPass\r",
							"// }));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"new_password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/reset_password/{{reset_token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"reset_password",
						"{{reset_token}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - with old pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP код\r",
							"pm.test(\"[login_old_pass] Response status code is 401\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(401);\r",
							"});\r",
							"\r",
							"// Объект error существует\r",
							"pm.test(\"[login_old_pass] Response contains error object\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"// Поле code внутри error\r",
							"pm.test(\"[login_old_pass] Error contains correct code\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 401);\r",
							"});\r",
							"\r",
							"// Поле message\r",
							"pm.test(\"[login_old_pass] Error contains correct message\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.error.message).to.match(/invalid password/i);\r",
							"});\r",
							"\r",
							"// Поле path\r",
							"pm.test(\"[login_old_pass] Error contains correct path\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\");\r",
							"    pm.expect(jsonData.error.path).to.eql(\"/api/auth/login\");\r",
							"});\r",
							"\r",
							"// Поле method\r",
							"pm.test(\"[login_old_pass] Error contains correct method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\");\r",
							"    pm.expect(jsonData.error.method).to.eql(\"POST\");\r",
							"});\r",
							"\r",
							"// Поле timestamp — строка ISO\r",
							"pm.test(\"[login_old_pass] Error contains timestamp in string format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"    pm.expect(new Date(jsonData.error.timestamp).toString()).not.to.eql(\"Invalid Date\");\r",
							"});\r",
							"\r",
							"// Структура error содержит только ожидаемые ключи\r",
							"pm.test(\"[login_old_pass] Error object has only expected keys\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let keys = Object.keys(jsonData.error);\r",
							"    pm.expect(keys).to.have.members([\"code\", \"message\", \"path\", \"method\", \"timestamp\"]);\r",
							"});\r",
							"\r",
							"// Сообщение ошибки user-friendly\r",
							"pm.test(\"[login_old_pass] Error message is human-readable string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.error.message.length).to.be.above(3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Old password is rejected (details.msg)\", function () {\r",
							"//     pm.expect(401).to.include(pm.response.code);\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.details[0].msg).to.match(/old|invalid password/i);  //(/old|same as|cannot/i)\r",
							"// });\r",
							"\r",
							"// pm.test(\"Reset with old password is rejected\", function () {\r",
							"//     pm.expect(pm.response.code).to.eql(401);\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData).to.have.property(\"error\");\r",
							"//     pm.expect(jsonData.error).to.have.property(\"message\");\r",
							"//     pm.expect(jsonData.error.message).to.match(/invalid password/i);\r",
							"// });\r",
							"\r",
							"// pm.test(\"Error contains correct path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(`/api/auth/login`);\r",
							"//     pm.expect(jsonData.error.method).to.eql(\"POST\");\r",
							"//     pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"userEmail\", \"test@email.com\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{user_email}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - with empty pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[login_empty_pass] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[login_empty_pass] Old password is rejected\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].msg).to.match(/string should have/i);  //(/old|same as|cannot/i)\r",
							"    pm.expect(jsonData.error.details[0].type).to.match(/string_too_short/i); \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[login_empty_pass] Reset with old password is rejected (message)\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/validation failed/i);\r",
							"});\r",
							"\r",
							"pm.test(\"[login_empty_pass] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/auth/login`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"POST\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"userEmail\", \"test@email.com\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{user_email}}\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - with new pass_inv_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[login_new_pass_inv_email] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[login_new_pass_inv_email] Invalid password is rejected - deteils\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.details[0].loc[0]).to.eql(\"body\"); \r",
							"\r",
							"    pm.expect(jsonData.error.details[0].msg).to.match(/input should be a valid dictionary/i);  //(/old|same as|cannot/i)\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"model_attributes_type\"); \r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[login_new_pass_inv_email] Invalid password is rejected\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/validation failed/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[login_new_pass_inv_email] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/auth/login`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"POST\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"userEmail\", \"test@email.com\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{$randomEmail}}\", \r\n    \"password\": \"{{newUserPassword}}\"\r\n},"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - with new pass + REsave_pass",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Save the old token values ​​(if any)\r",
							"pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// seve response data to environment variables:\r",
							"// {{access_token}} and {{refresh_token}}\r",
							"let jsonData = pm.response.json();\r",
							"// save tokens and time to environment variables\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);\r",
							"pm.environment.set(\"token_time\", Date.now());\r",
							"\r",
							"console.log(\"Login successful → tokens saved\");\r",
							"\r",
							"\r",
							"// test for successful login response\r",
							"pm.test(\"[new_pass_login] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens present\r",
							"\r",
							"// Access token valid JWT format\r",
							"pm.test(\"[new_pass_login] Access token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"\r",
							"    let parts = jsonData.access_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Access token header is valid base64\r",
							"pm.test(\"[new_pass_login] Access token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let header = jsonData.access_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token valid JWT format\r",
							"pm.test(\"[new_pass_login] Refresh token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"\r",
							"    let parts = jsonData.refresh_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token header is valid base64\r",
							"pm.test(\"[new_pass_login] Refresh token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.refresh_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    \r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: token_type is 'bearer'\r",
							"pm.test(\"[new_pass_login] Token_type is 'bearer'\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
							"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: access_token issued\r",
							"pm.test(\"[new_pass_login] Access token present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"    pm.expect(jsonData.access_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check: refresh_token issued\r",
							"pm.test(\"[new_pass_login] Refresh token present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"    pm.expect(jsonData.refresh_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens updated compared to previous\r",
							"\r",
							"// Check if Access token are updated:\r",
							"let prevAccess = pm.environment.get(\"prev_access_token\");\r",
							"pm.test(\"[new_pass_login] Access token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevAccess, \"prev_access_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevAccess);\r",
							"});\r",
							"\r",
							"\r",
							"// Check if Refresh token are updated:\r",
							"let prevRefresh = pm.environment.get(\"prev_refresh_token\");\r",
							"pm.test(\"[new_pass_login] Refresh token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevRefresh, \"prev_refresh_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevRefresh);\r",
							"});\r",
							"\r",
							"\r",
							"// Check: time updated\r",
							"let tokenTime = parseInt(pm.environment.get(\"token_time\"));\r",
							"pm.test(\"[new_pass_login] Token time is set\", function () {\r",
							"    pm.expect(tokenTime).to.be.a(\"number\");\r",
							"    pm.expect(tokenTime).to.be.closeTo(Date.now(), 2000); // permissible difference is 2 seconds\r",
							"});\r",
							"\r",
							"\r",
							"// Check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[new_pass_login] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"// Update the primary password in the environment\r",
							"let newPass = pm.environment.get(\"newUserPassword\");\r",
							"if (newPass) {\r",
							"    pm.environment.set(\"userPassword\", newPass);   // Make the new password the primary one\r",
							"    pm.environment.unset(\"newUserPassword\");       // Clear the temporary variable\r",
							"    console.log(\"userPassword updated to new one:\", newPass);\r",
							"\r",
							"    pm.test(\"Password updated in environment\", function () {\r",
							"        pm.expect(pm.environment.get(\"userPassword\")).to.eql(newPass);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"No new password found in environment\", function () {\r",
							"        pm.expect(newPass).to.be.undefined;\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// let res = pm.response;\r",
							"// let data = res.json();\r",
							"\r",
							"// if (res.code === 200) {\r",
							"//     pm.test(\"Login responded with 200\", function () {\r",
							"//         pm.expect(res.code).to.eql(200);\r",
							"//     });\r",
							"\r",
							"//     pm.test(\"Access token returned\", function () {\r",
							"//         pm.expect(data).to.have.property(\"access_token\");\r",
							"//     });\r",
							"\r",
							"//     pm.test(\"Refresh token returned\", function () {\r",
							"//         pm.expect(data).to.have.property(\"refresh_token\");\r",
							"//     });\r",
							"\r",
							"//     // Save new tokens\r",
							"//     pm.environment.set(\"access_token\", data.access_token);\r",
							"//     pm.environment.set(\"refresh_token\", data.refresh_token);\r",
							"//     pm.environment.set(\"token_time\", Date.now());\r",
							"// } else {\r",
							"//     pm.test(\"Login failed with 401\", function () {\r",
							"//         pm.expect(res.code).to.eql(401);\r",
							"//     });\r",
							"\r",
							" \r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{user_email}}\",\r\n  \"password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get contacts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // --- Bulk create 5 users ---\r",
							"// for (let i = 0; i < 5; i++) {\r",
							"//     let body = {\r",
							"//         first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"//         last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"//         email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"//         phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"//         birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"//         extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"//     };\r",
							"\r",
							" \r",
							"\r",
							"//     pm.sendRequest({\r",
							"//         url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\",\r",
							"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify(body)\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.error(\"Error creating user:\", err);\r",
							"//         } else {\r",
							"//             console.log(\"User created:\", res.json());\r",
							"//         }\r",
							"//     });\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[get_contacts_new_pass] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Contacts list is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Contacts are sorted by ID ascending\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (let i = 1; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// check that the last created contact is present and is the latest\r",
							"pm.test(\"[get_contacts_new_pass] Last created contact is present and is the latest\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var lastId = parseInt(pm.environment.get(\"last_contact_id\"));\r",
							"    var lastContact = jsonData[jsonData.length - 1];\r",
							"    pm.expect(lastContact.id).to.eql(lastId);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All contact IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Collect all IDs into an array\r",
							"    var ids = jsonData.map(c => c.id);\r",
							"    // Create a Set (it stores only unique values)\r",
							"    var uniqueIds = new Set(ids);\r",
							"    // Check that the lengths match → no duplicates\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All required fields are not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, \"Contacts list should not be empty\").to.be.above(0);\r",
							"\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.not.be.empty;\r",
							"        pm.expect(c.last_name).to.not.be.empty;\r",
							"        pm.expect(c.email).to.not.be.empty;\r",
							"        pm.expect(c.phone).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All contacts have correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.be.a(\"string\");\r",
							"        pm.expect(c.last_name).to.be.a(\"string\");\r",
							"        pm.expect(c.email).to.be.a(\"string\");\r",
							"        pm.expect(c.phone).to.be.a(\"string\");\r",
							"        pm.expect(c.birthday).to.be.a(\"string\");\r",
							"        pm.expect(c.extra).to.be.a(\"string\");\r",
							"        pm.expect(c.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All phones have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Birthday has valid date format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All emails have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// // check number of contacts returned is exactly 100\r",
							"// pm.test(\"[get_contacts_new_pass] Exactly 100 contacts returned\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.length).to.eql(100);\r",
							"// });\r",
							"\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[get_contacts_new_pass] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Response size under 1MB\", function () {\r",
							"    pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							"\r",
							"// save the current search_name for the next request \r",
							"var jsonData = pm.response.json();\r",
							"if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"    var first = jsonData[0]; // get the first contact\r",
							"    pm.environment.set(\"contact_id\", first.id);\r",
							"    pm.environment.set(\"contact_first_name\", first.first_name);\r",
							"    pm.environment.set(\"contact_last_name\", first.last_name);\r",
							"    pm.environment.set(\"contact_email\", first.email);\r",
							"    pm.environment.set(\"contact_phone\", first.phone);\r",
							"    pm.environment.set(\"contact_birthday\", first.birthday);\r",
							"    pm.environment.set(\"contact_extra\", first.extra);\r",
							"\r",
							"    console.log(\"Saved first contact Data:\", first);\r",
							"\r",
							"    pm.test(`[get_contacts_new_pass] Saved contact ID ${first.id} from the list`, function () {\r",
							"        pm.expect(first).to.have.property(\"id\");\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    console.warn(\"Response has no contacts, nothing saved\");   \r",
							"    // pm.environment.unset(\"contact_id\");\r",
							"}\r",
							"\r",
							"\r",
							"const contactSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\"],\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"first_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"last_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"phone\": { \"type\": \"string\" },\r",
							"        \"birthday\": { \"type\": \"string\", \"pattern\": \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\" },\r",
							"        \"extra\": { \"type\": [\"string\", \"null\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"const contactsListSchema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": contactSchema\r",
							"};\r",
							"\r",
							"pm.test(\"[get_contacts_limit=10] Response matches Contact schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(contactsListSchema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// var jsonData = pm.response.json();\r",
							"// // if this is an array, take the first_name of the first contact\r",
							"// if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"//     pm.environment.set(\"search_name\", jsonData[0].first_name);\r",
							"//     console.log(\"Saved search_name:\", jsonData[0].first_name);\r",
							"// } else if (jsonData.first_name) {\r",
							"//     // if this is a single object\r",
							"//     pm.environment.set(\"search_name\", jsonData.first_name);\r",
							"//     console.log(\"Saved search_name:\", jsonData.first_name);\r",
							"// } else {\r",
							"//     console.warn(\"No first_name found in response\");\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// var jsonData = pm.response.json();\r",
							"// if (jsonData.length > 0) {\r",
							"//     var first = jsonData[0]; // get the first contact\r",
							"//     pm.environment.set(\"contact_id\", first.id);\r",
							"//     pm.environment.set(\"contact_first_name\", first.first_name);\r",
							"//     pm.environment.set(\"contact_last_name\", first.last_name);\r",
							"//     pm.environment.set(\"contact_email\", first.email);\r",
							"//     pm.environment.set(\"contact_phone\", first.phone);\r",
							"//     pm.environment.set(\"contact_birthday\", first.birthday);\r",
							"//     pm.environment.set(\"contact_extra\", first.extra);\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					],
					"query": [
						{
							"key": "limit",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get contact by {id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[get_contacts_by_id] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_by_id] Contact has all required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\", \"extra\"].forEach(field => {\r",
							"        pm.expect(jsonData).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_by_id] Correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.phone).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.birthday).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.extra).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_by_id] Contact data matches saved values\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"contact_id\")));\r",
							"    pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"contact_first_name\"));\r",
							"    pm.expect(jsonData.last_name).to.eql(pm.environment.get(\"contact_last_name\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"contact_email\"));\r",
							"    pm.expect(jsonData.phone).to.eql(pm.environment.get(\"contact_phone\"));\r",
							"    pm.expect(jsonData.birthday).to.eql(pm.environment.get(\"contact_birthday\"));\r",
							"    pm.expect(jsonData.extra).to.eql(pm.environment.get(\"contact_extra\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_by_id] Response is a single object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.false;\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_by_id] Only one contact returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property(\"length\"); \r",
							"});\r",
							"\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[get_contacts_by_id] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"const contactSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\"],\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"first_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"last_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"phone\": { \"type\": \"string\" },\r",
							"        \"birthday\": { \"type\": \"string\", \"pattern\": \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\" },\r",
							"        \"extra\": { \"type\": [\"string\", \"null\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_by_id] Response matches Contact schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(contactSchema);\r",
							"});\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// const data = pm.response.json();\r",
							"// pm.environment.set(\"contact_first_name\", data.first_name);\r",
							"// pm.environment.set(\"contact_last_name\", data.last_name);\r",
							"// pm.environment.set(\"contact_email\", data.email);\r",
							"// pm.environment.set(\"contact_phone\", data.phone);\r",
							"// pm.environment.set(\"contact_birthday\", data.birthday);\r",
							"// pm.environment.set(\"contact_extra\", data.extra);\r",
							"// pm.environment.set(\"contact_id\", data.id);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get contact by inv_ {id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[get_contacts_by_inv_id] Status is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_by_inv_id] Error response has correct structure\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 404);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Contact not found\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts/\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"GET\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_by_inv_id] Error message contains 'not found'\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.match(/not found/i);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/4242",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"4242"
					]
				}
			},
			"response": []
		},
		{
			"name": "contact + {id}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// \"{{new_first_name}}\"\r",
							"pm.environment.set(\"new_first_name\", \"JOHNNY\");\r",
							"\r",
							"// // \"{{new_birthday}}\"\r",
							"// pm.environment.set(\"new_birthday\", \"1990-09-12\");\r",
							"\r",
							"\r",
							"\r",
							"// Create a \"today\" date object\r",
							"let today = new Date();\r",
							"\r",
							"// Add 5 days\r",
							"today.setDate(today.getDate() + 5);\r",
							"\r",
							"// Set the year to 1990\r",
							"today.setFullYear(1990);\r",
							"\r",
							"// Convert to YYYY-MM-DD format\r",
							"let customDate = today.toISOString().split(\"T\")[0];\r",
							"\r",
							"// Save to an environment variable\r",
							"pm.environment.set(\"new_birthday\", customDate);\r",
							"\r",
							"console.log(\"new_birthday (+5 days):\", customDate);\r",
							"console.log(\"new_first_name:\", \"JOHNNY\");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_contacts_by_id] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Comparison of each field request with response:\r",
							"pm.test(\"[put_contacts_by_id] first_name matches\", function () {\r",
							"    pm.expect(response.first_name).to.eql(pm.environment.get(\"new_first_name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] last_name matches\", function () {\r",
							"    pm.expect(response.last_name).to.eql(pm.environment.get(\"contact_last_name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] email matches\", function () {\r",
							"    pm.expect(response.email).to.eql(pm.environment.get(\"contact_email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] phone matches\", function () {\r",
							"    pm.expect(response.phone).to.eql(pm.environment.get(\"contact_phone\"));\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] birthday matches\", function () {\r",
							"    pm.expect(response.birthday).to.eql(pm.environment.get(\"new_birthday\"));\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] extra matches\", function () {\r",
							"    pm.expect(response.extra).to.eql(pm.environment.get(\"contact_extra\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] Contact has all required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\", \"extra\"].forEach(field => {\r",
							"        pm.expect(jsonData).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// check the presence of all fields\r",
							"pm.test(\"[put_contacts_by_id] Contact has all required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\", \"extra\"].forEach(field => {\r",
							"        pm.expect(jsonData).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"// checking data types\r",
							"pm.test(\"[put_contacts_by_id] All fields have correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.first_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.last_name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.phone).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.birthday).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.extra).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// check that required fields are not empty.\r",
							"pm.test(\"[put_contacts_by_id] Required fields are not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name).to.not.be.empty;\r",
							"    pm.expect(jsonData.last_name).to.not.be.empty;\r",
							"    pm.expect(jsonData.email).to.not.be.empty;\r",
							"    pm.expect(jsonData.phone).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// check that the object was returned\r",
							"pm.test(\"[put_contacts_by_id] Response is a single object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.false;\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id] Only one contact returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property(\"length\"); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// const requestData = {\r",
							"//     first_name: \"JOHNNY\",\r",
							"//     last_name: pm.environment.get(\"contact_last_name\"),\r",
							"//     email: pm.environment.get(\"contact_email\"),\r",
							"//     phone: pm.environment.get(\"contact_phone\"),\r",
							"//     birthday: \"1990-09-12\",\r",
							"//     extra: pm.environment.get(\"contact_extra\"),\r",
							"// };\r",
							"\r",
							"// const response = pm.response.json();\r",
							"\r",
							"// Object.keys(requestData).forEach(key => {\r",
							"//     pm.test(`${key} matches`, function () {\r",
							"//         pm.expect(response[key]).to.eql(requestData[key]);\r",
							"//     });\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{new_first_name}}\", // Set the values ​​in Pre-request\r\n  \"last_name\": \"{{contact_last_name}}\", //parameters from response - \"get contact by {id}\"\"\r\n  \"email\": \"{{contact_email}}\",\r\n  \"phone\": \"{{contact_phone}}\",\r\n  \"birthday\": \"{{new_birthday}}\", // Set the values ​​in Pre-request\r\n  \"extra\": \"{{contact_extra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "contacts - not_found_contact_id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_contacts_by_id_code_404] Status code is 404 on repeat delete\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id_code_404] Error object is present in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id_code_404] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(404);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Contact not found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id_code_404] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let contactId = pm.environment.get(\"not_found_contact_id\"); \r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${contactId}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PUT\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id_code_404] Timestamp is present and valid string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// Performance\r",
							"pm.test(\"[put_contacts_by_id_code_404] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // The list can be empty, but it should not contain any extra ones\r",
							"// pm.test(\"No irrelevant results\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     var query = pm.variables.get(\"search_empty\");\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// // Check that the name of each contact contains the search string\r",
							"// var query = pm.variables.get(\"search_empty\"); // get the search query from the environment variables\r",
							"// pm.test(\"Search results match query\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// // Check: if Date is not empty, validate the fields\r",
							"// pm.test(\"All required fields are not empty\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"\r",
							"//     if (jsonData.length === 0) {\r",
							"//         console.log(\"Response is empty, skipping required fields check\");\r",
							"//         return;\r",
							"//     }\r",
							"\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name, \"first_name should not be empty\").to.not.be.empty;\r",
							"//         pm.expect(c.last_name, \"last_name should not be empty\").to.not.be.empty;\r",
							"//         pm.expect(c.email, \"email should not be empty\").to.not.be.empty;\r",
							"//         pm.expect(c.phone, \"phone should not be empty\").to.not.be.empty;\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"All contacts have correct data types\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"\r",
							"//         if (jsonData.length === 0) {\r",
							"//         console.log(\"Response is empty, skipping required fields check\");\r",
							"//         return;\r",
							"//     }\r",
							"\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name).to.be.a(\"string\");\r",
							"//         pm.expect(c.last_name).to.be.a(\"string\");\r",
							"//         pm.expect(c.email).to.be.a(\"string\");\r",
							"//         pm.expect(c.phone).to.be.a(\"string\");\r",
							"//         pm.expect(c.birthday).to.be.a(\"string\");\r",
							"//         pm.expect(c.extra).to.be.a(\"string\");\r",
							"//         pm.expect(c.id).to.be.a(\"number\");\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"All phones have valid format\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Birthday has valid date format\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"All emails have valid format\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Response size under 1MB\", function () {\r",
							"//     pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"TEST\", \r\n  \"last_name\": \"{{contact_last_name}}\", \r\n  \"email\": \"{{contact_email}}\",\r\n  \"phone\": \"{{contact_phone}}\",\r\n  \"birthday\": \"{{new_birthday}}\", // Set the values ​​in Pre-request\r\n  \"extra\": \"{{contact_extra}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{not_found_contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{not_found_contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "contacts + inv {id=0}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_contacts_by_id=0] Status code is 422 on invalid contact_id\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Error object exists in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let invalid_Int = pm.environment.get(\"invalid_Int\"); // invalid_Int from environment in preflight pre-request\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${invalid_Int}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PUT\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[put_contacts_by_id=0] Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Details object structure is valid\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let detail = jsonData.error.details[0];\r",
							"    pm.expect(detail).to.have.all.keys(\"loc\", \"msg\", \"type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Error details show int greater than equal\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"contact_id\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"greater_than_equal\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Error message in details is present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"msg\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=0] Error type is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.be.oneOf([\"int_parsing\", \"greater_than_equal\"]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_Int\", \"0\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/0",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "contacts + inv {id=str}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_contacts_by_id=Str] Status code is 422 on invalid contact_id\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Error object exists in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let invalidStr = pm.environment.get(\"invalid_Str\"); // invalidStr from environment in preflight pre-request\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${invalidStr}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PUT\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[put_contacts_by_id=Str] Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Details object structure is valid\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let detail = jsonData.error.details[0];\r",
							"    pm.expect(detail).to.have.all.keys(\"loc\", \"msg\", \"type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Error details show int parsing issue\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"contact_id\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"int_parsing\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Error message in details is present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"msg\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_contacts_by_id=Str] Error type is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.be.oneOf([\"int_parsing\", \"greater_than_equal\"]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_Str\", \"abraCodabra\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{invalid_Str}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{invalid_Str}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "birthdays?days=7",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const BASE_URL = pm.environment.get(\"base_url\");\r",
							"const DAYS_RANGE = 7;\r",
							"const MIN_YEAR = 1970;\r",
							"const MAX_YEAR = 2000;\r",
							"\r",
							"function randomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"// 1. Get all contacts\r",
							"pm.sendRequest({\r",
							"    url: `${BASE_URL}/api/contacts`,\r",
							"    method: \"GET\",\r",
							"    header: { \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\") }\r",
							"}, function (err, res) {\r",
							"    if (err || res.code !== 200) {\r",
							"        console.error(\"Failed to fetch contacts\", err || res.text());\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    let contacts = res.json();\r",
							"    if (!Array.isArray(contacts) || contacts.length < 2) {\r",
							"        console.warn(\"Not enough contacts to update (need at least 2)\");\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    // 2. Contact that we do not touch (for example {{contact_id}})\r",
							"    let excludeId = parseInt(pm.environment.get(\"contact_id\"));\r",
							"    console.log(`Skipping contact_id=${excludeId}, will not be updated`);\r",
							"\r",
							"    // 3. Select a maximum of 3 contacts except excludeId\r",
							"    let subset = contacts.filter(c => c.id !== excludeId).slice(0, 3);\r",
							"\r",
							"    // 4. Update the birthday of the selected contacts\r",
							"    subset.forEach(c => {\r",
							"        let today = new Date();\r",
							"        let randDay = today.getDate() + randomInt(0, DAYS_RANGE);\r",
							"        let randYear = randomInt(MIN_YEAR, MAX_YEAR);\r",
							"\r",
							"        let newBirthday = new Date(randYear, today.getMonth(), randDay)\r",
							"            .toISOString().split(\"T\")[0];\r",
							"\r",
							"        pm.sendRequest({\r",
							"            url: `${BASE_URL}/api/contacts/${c.id}`,\r",
							"            method: \"PUT\",\r",
							"            header: {\r",
							"                \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\"),\r",
							"                \"Content-Type\": \"application/json\"\r",
							"            },\r",
							"            body: {\r",
							"                mode: \"raw\",\r",
							"                raw: JSON.stringify({\r",
							"                    first_name: c.first_name,\r",
							"                    last_name: c.last_name,\r",
							"                    email: c.email,\r",
							"                    phone: c.phone,\r",
							"                    birthday: newBirthday,\r",
							"                    extra: c.extra\r",
							"                })\r",
							"            }\r",
							"        }, function (err2, res2) {\r",
							"            if (err2) {\r",
							"                console.error(`PUT failed for id=${c.id}`, err2);\r",
							"            } else {\r",
							"                console.log(`Updated contact id=${c.id}, new birthday=${newBirthday}`);\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[get_birthdays] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_birthdays] Response is array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_birthdays] Each contact has required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\", \"extra\"].forEach(field => {\r",
							"            pm.expect(c).to.have.property(field);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"All birthdays are within the next 7 days\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     let today = new Date();\r",
							"//     let limit = new Date();\r",
							"//     limit.setDate(today.getDate() + 7);\r",
							"\r",
							"//     jsonData.forEach(c => {\r",
							"//         let bday = new Date(c.birthday);\r",
							"//         // For checking we use only month-day, we ignore the year\r",
							"//         let thisYearBday = new Date(today.getFullYear(), bday.getMonth(), bday.getDate());\r",
							"        \r",
							"//         pm.expect(thisYearBday >= today && thisYearBday <= limit,\r",
							"//             `Birthday of ${c.first_name} ${c.last_name} (${c.birthday}) is not within 7 days`\r",
							"//         ).to.be.true;\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[get_birthdays] All birthdays are within the next 7 days\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    let today = new Date();\r",
							"    today.setHours(0,0,0,0); // reset the time\r",
							"    let limit = new Date(today);\r",
							"    limit.setDate(today.getDate() + 7);\r",
							"\r",
							"    jsonData.forEach(c => {\r",
							"        let bday = new Date(c.birthday);\r",
							"\r",
							"        // Birthday this year\r",
							"        let thisYearBday = new Date(today.getFullYear(), bday.getMonth(), bday.getDate());\r",
							"\r",
							"        // If the birthday has already passed this year, check next yearд\r",
							"        if (thisYearBday < today) {\r",
							"            thisYearBday.setFullYear(today.getFullYear() + 1);\r",
							"        }\r",
							"\r",
							"        pm.expect(\r",
							"            thisYearBday >= today && thisYearBday <= limit,\r",
							"            `Birthday of ${c.first_name} ${c.last_name} (${c.birthday}) is not within 7 days`\r",
							"        ).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"[get_birthdays] Empty list is allowed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_birthdays] All contact IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var ids = jsonData.map(c => c.id);\r",
							"    var uniqueIds = new Set(ids);\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_birthdays] Contacts are sorted by upcoming birthdays\", function () {\r",
							"    let contacts = pm.response.json();\r",
							"    let todayYear = new Date().getFullYear();\r",
							"\r",
							"    for (let i = 1; i < contacts.length; i++) {\r",
							"        let prev = new Date(todayYear, new Date(contacts[i-1].birthday).getMonth(), new Date(contacts[i-1].birthday).getDate());\r",
							"        let curr = new Date(todayYear, new Date(contacts[i].birthday).getMonth(), new Date(contacts[i].birthday).getDate());\r",
							"\r",
							"        pm.expect(curr.getTime()).to.be.at.least(prev.getTime(),\r",
							"            `Contact ${contacts[i].id} has earlier birthday than ${contacts[i-1].id}`);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_birthdays] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/upcoming-birthdays?days=7",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"upcoming-birthdays"
					],
					"query": [
						{
							"key": "days",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "contact + {id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[DEL] Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL] Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "contact + {id} repeat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[DEL_repeat] Status code is 404 on repeat delete\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_repeat] Error object is present in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_repeat] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(404);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Contact not found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_repeat] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"    pm.expect(jsonData.error.method).to.eql(\"DELETE\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_repeat] Timestamp is present and valid string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "contact + not_found_contact_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[DEL_404] Status code is 404 on repeat delete\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_404] Error object is present in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_404] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(404);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Contact not found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_404] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let contactId = pm.environment.get(\"not_found_contact_id\"); \r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${contactId}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"DELETE\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_404] Timestamp is present and valid string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{not_found_contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{not_found_contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "contacts + inv {id=0}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[DEL_id=0] Status code is 422 on invalid contact_id\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=0] Error object exists in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=0] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[DEL_id=0] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let invalid_Int = pm.environment.get(\"invalid_Int\"); // invalid_Int from environment in preflight pre-request\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${invalid_Int}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"DELETE\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[DEL_id=0] Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=0] Details object structure is valid\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let detail = jsonData.error.details[0];\r",
							"    pm.expect(detail).to.have.all.keys(\"loc\", \"msg\", \"type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=0] Error details show int greater than equal\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"contact_id\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"greater_than_equal\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=0] Error message in details is present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"msg\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=0] Error type is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.be.oneOf([\"int_parsing\", \"greater_than_equal\"]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_Int\", \"0\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/0",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "contacts + inv {id=str}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[DEL_id=Str] Status code is 422 on invalid contact_id\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Error object exists in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"});\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let invalidStr = pm.environment.get(\"invalid_Str\"); // invalidStr from environment in preflight pre-request\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${invalidStr}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"DELETE\");\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[DEL_id=Str] Error contains path and method\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error.path).to.include(\"/api/contacts/\");\r",
							"//     pm.expect(jsonData.error.method).to.be.oneOf([\"GET\", \"PUT\", \"DELETE\"]);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Details object structure is valid\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let detail = jsonData.error.details[0];\r",
							"    pm.expect(detail).to.have.all.keys(\"loc\", \"msg\", \"type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Error details show int parsing issue\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"contact_id\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.eql(\"int_parsing\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Error message in details is present\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"msg\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[DEL_id=Str] Error type is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.details[0]).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.error.details[0].type).to.be.oneOf([\"int_parsing\", \"greater_than_equal\"]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"invalid_Str\", \"abraCodabra\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{invalid_Str}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{invalid_Str}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get contact by {id} = {{contact_id}}  404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// test for successful login response\r",
							"pm.test(\"[get_contact_DEL_id_404] Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"var deletedId = pm.variables.get(\"contact_id\");\r",
							"pm.test(`[get_contact_DEL_id_404] Deleted contact ID_${deletedId} not found`, function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(404);\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Contact not found\");\r",
							"    // pm.expect(jsonData.error.message).to.match(/not found/i);\r",
							"});\r",
							"\r",
							"\r",
							"// var deletedId = pm.variables.get(\"contact_id\");\r",
							"// pm.test(`[get_contact_DEL_id_404] Contact ID ${deletedId} should not exist`, function () {\r",
							"//     // Сервер должен вернуть 404\r",
							"//     pm.response.to.have.status(404);\r",
							"//     // Проверяем структуру ошибки\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.error).to.have.property(\"code\", 404);\r",
							"//     pm.expect(jsonData.error).to.have.property(\"message\", \"Contact not found\");\r",
							"//    // Дополнительно: убеждаемся, что path совпадает\r",
							"//     pm.expect(jsonData.error.path).to.include(`/api/contacts/${deletedId}`);\r",
							"// });\r",
							"\r",
							"\r",
							"var deletedId = pm.variables.get(\"contact_id\");\r",
							"pm.test(`[get_contact_DEL_id_404] Error contains correct path, method, and contact_id_${deletedId}`, function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let contact_id = pm.environment.get(\"contact_id\"); // contact_id from environment variable\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/${contact_id}`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"GET\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts/{{contact_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"{{contact_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "search contacts by {{new_first_name}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[search_contact_by_DEL_name] Status code is 200 OK \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var query = pm.variables.get(\"new_first_name\");\r",
							"pm.test(`[search_contact_by_DEL_name] Deleted contact name ${query} not present in search results`, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name.toLowerCase()).to.not.eql(query.toLowerCase());\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"var deletedId = pm.variables.get(\"contact_id\");\r",
							"pm.test(`[search_contact_by_DEL_name] Deleted contact ID_${deletedId} not present in search results`, function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.id).to.not.eql(parseInt(deletedId));\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[search_contact_by_DEL_name] Search results are empty for deleted contact\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(0);\r",
							"});\r",
							"\r",
							"\r",
							"// // The list can be empty, but it should not contain any extra ones\r",
							"// pm.test(\"[search_contact_by_DEL_name] No irrelevant results\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     var query = pm.variables.get(\"new_first_name\");\r",
							"//     jsonData.forEach(c => {\r",
							"//         pm.expect(c.first_name.toLowerCase()).to.include(query.toLowerCase());\r",
							"//     });\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/contacts/search?q={{new_first_name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "{{new_first_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get contacts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[get_contacts_new_pass] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Contacts list is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Contacts are sorted by ID ascending\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (let i = 1; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// check that the last created contact is present and is the latest\r",
							"pm.test(\"[get_contacts_new_pass] Last created contact is present and is the latest\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var lastId = parseInt(pm.environment.get(\"last_contact_id\"));\r",
							"    var lastContact = jsonData[jsonData.length - 1];\r",
							"    pm.expect(lastContact.id).to.eql(lastId);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All contact IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Collect all IDs into an array\r",
							"    var ids = jsonData.map(c => c.id);\r",
							"    // Create a Set (it stores only unique values)\r",
							"    var uniqueIds = new Set(ids);\r",
							"    // Check that the lengths match → no duplicates\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All required fields are not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, \"Contacts list should not be empty\").to.be.above(0);\r",
							"\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.not.be.empty;\r",
							"        pm.expect(c.last_name).to.not.be.empty;\r",
							"        pm.expect(c.email).to.not.be.empty;\r",
							"        pm.expect(c.phone).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All contacts have correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.be.a(\"string\");\r",
							"        pm.expect(c.last_name).to.be.a(\"string\");\r",
							"        pm.expect(c.email).to.be.a(\"string\");\r",
							"        pm.expect(c.phone).to.be.a(\"string\");\r",
							"        pm.expect(c.birthday).to.be.a(\"string\");\r",
							"        pm.expect(c.extra).to.be.a(\"string\");\r",
							"        pm.expect(c.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All phones have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Birthday has valid date format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] All emails have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[get_contacts_new_pass] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_new_pass] Response size under 1MB\", function () {\r",
							"    pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							"\r",
							"// save the current search_name for the next request \r",
							"var jsonData = pm.response.json();\r",
							"if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"    var first = jsonData[0]; // get the first contact\r",
							"    pm.environment.set(\"contact_id\", first.id);\r",
							"    pm.environment.set(\"contact_first_name\", first.first_name);\r",
							"    pm.environment.set(\"contact_last_name\", first.last_name);\r",
							"    pm.environment.set(\"contact_email\", first.email);\r",
							"    pm.environment.set(\"contact_phone\", first.phone);\r",
							"    pm.environment.set(\"contact_birthday\", first.birthday);\r",
							"    pm.environment.set(\"contact_extra\", first.extra);\r",
							"\r",
							"    console.log(\"Saved first contact Data:\", first);\r",
							"\r",
							"    pm.test(`[get_contacts_new_pass] Saved contact ID ${first.id} from the list`, function () {\r",
							"        pm.expect(first).to.have.property(\"id\");\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    console.warn(\"Response has no contacts, nothing saved\");   \r",
							"    // pm.environment.unset(\"contact_id\");\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// var jsonData = pm.response.json();\r",
							"// // if this is an array, take the first_name of the first contact\r",
							"// if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"//     pm.environment.set(\"search_name\", jsonData[0].first_name);\r",
							"//     console.log(\"Saved search_name:\", jsonData[0].first_name);\r",
							"// } else if (jsonData.first_name) {\r",
							"//     // if this is a single object\r",
							"//     pm.environment.set(\"search_name\", jsonData.first_name);\r",
							"//     console.log(\"Saved search_name:\", jsonData.first_name);\r",
							"// } else {\r",
							"//     console.warn(\"No first_name found in response\");\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// var jsonData = pm.response.json();\r",
							"// if (jsonData.length > 0) {\r",
							"//     var first = jsonData[0]; // get the first contact\r",
							"//     pm.environment.set(\"contact_id\", first.id);\r",
							"//     pm.environment.set(\"contact_first_name\", first.first_name);\r",
							"//     pm.environment.set(\"contact_last_name\", first.last_name);\r",
							"//     pm.environment.set(\"contact_email\", first.email);\r",
							"//     pm.environment.set(\"contact_phone\", first.phone);\r",
							"//     pm.environment.set(\"contact_birthday\", first.birthday);\r",
							"//     pm.environment.set(\"contact_extra\", first.extra);\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts?limit=100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					],
					"query": [
						{
							"key": "limit",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							"\r",
							"\r",
							"// function sleep(ms) {\r",
							"//     return new Promise(resolve => setTimeout(resolve, ms));\r",
							"// }\r",
							"\r",
							"// await sleep(10000); // 10 секунд\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data = pm.response.json();\r",
							"\r",
							"// Код ответа\r",
							"pm.test(\"[put_ava] Avatar update responded with 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Поле avatar_url существует\r",
							"pm.test(\"[put_ava] Response contains avatar_url\", function () {\r",
							"    pm.expect(data).to.have.property(\"avatar_url\");\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — строка\r",
							"pm.test(\"[put_ava] Avatar URL is a string\", function () {\r",
							"    pm.expect(data.avatar_url).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — корректный Cloudinary URL\r",
							"pm.test(\"[put_ava] Avatar URL has correct Cloudinary format\", function () {\r",
							"    pm.expect(data.avatar_url).to.match(/^https:\\/\\/res\\.cloudinary\\.com\\//);\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — содержит папку avatars/ContactsAPI\r",
							"pm.test(\"[put_ava] Avatar URL contains expected path\", function () {\r",
							"    pm.expect(data.avatar_url).to.include(\"/avatars/ContactsAPI/\");\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — оканчивается на имя пользователя + расширение .jpg/.png\r",
							"let userName = pm.environment.get(\"user_name\");\r",
							"if (userName) {\r",
							"    pm.test(\"[put_ava] Avatar URL ends with username and extension\", function () {\r",
							"        pm.expect(data.avatar_url).to.match(new RegExp(`${userName}\\\\.(jpg|jpeg|png|gif)$`, \"i\"));\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"// Сравнение с предыдущим значением (если есть)\r",
							"let prevAvatarUpload = pm.environment.get(\"prev_avatar_url\");\r",
							"if (prevAvatarUpload) {\r",
							"    pm.test(\"[put_ava] Avatar URL changed compared to previous\", function () {\r",
							"        pm.expect(data.avatar_url).to.not.eql(prevAvatarUpload);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Обновляем Env для следующих тестов\r",
							"pm.environment.set(\"prev_avatar_url\", data.avatar_url);\r",
							"\r",
							"\r",
							"\r",
							"// function sleep(ms) {\r",
							"//     return new Promise(resolve => setTimeout(resolve, ms));\r",
							"// }\r",
							"// await sleep(10000); // 10 секунд\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Avatar updated\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"//     var json = pm.response.json();\r",
							"//     pm.expect(json.avatar_url).to.include(\"cloudinary\");\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Avatar updated\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"\r",
							"//     const json = pm.response.json();\r",
							"\r",
							"//     pm.expect(json).to.have.property(\"avatar_url\");\r",
							"//     pm.expect(json.avatar_url).to.include(\"ava_default.jpg\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052"
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar without file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_inv_ava] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_inv_ava] Request without file is rejected - message\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/validation failed/i);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"[put_inv_ava] Request without file is rejected - details\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.details[0].msg).to.match(/field required/i);  \r",
							"    pm.expect(jsonData.error.details[0].type).to.match(/missing/i); \r",
							"    pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"file\"]); \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_inv_ava] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/avatar`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PUT\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar .txt_file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_txt_ava] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_txt_ava] Request invalid file.txt format is rejected - message\", function () {\r",
							"    pm.expect([415, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/unsupported media type/i);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"[put_txt_ava] Request invalid file format is rejected - details\", function () {\r",
							"//     pm.expect([415, 422]).to.include(pm.response.code);\r",
							"//     let jsonData = pm.response.json();\r",
							"\r",
							"//     pm.expect(jsonData.error.details[0].msg).to.match(/field required/i);  \r",
							"//     pm.expect(jsonData.error.details[0].type).to.match(/missing/i); \r",
							"//     pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"file\"]); \r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[put_txt_ava] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/avatar`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PUT\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						},
						{
							"key": "file",
							"description": "tets.txt",
							"type": "file",
							"src": "postman-cloud:///1f09d5a9-9db0-42d0-a21c-bd9e0b5de5ab"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar large file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[put_large_ava] Status code is 413\", function () {\r",
							"    pm.response.to.have.status(413);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_large_ava] Too large file is rejected - message\", function () {\r",
							"    pm.expect([413]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/file too large/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[put_large_ava] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/avatar`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PUT\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[put_large_ava] Too large file is rejected - details\", function () {\r",
							"//     pm.expect([413]).to.include(pm.response.code);\r",
							"//     let jsonData = pm.response.json();\r",
							"\r",
							"//     pm.expect(jsonData.error.details[0].msg).to.match(/field required/i);  \r",
							"//     pm.expect(jsonData.error.details[0].type).to.match(/missing/i); \r",
							"//     pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"file\"]); \r",
							"// });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						},
						{
							"key": "file",
							"description": "tets.txt",
							"type": "file",
							"src": "postman-cloud:///1f09d5a9-9db0-42d0-a21c-bd9e0b5de5ab",
							"disabled": true
						},
						{
							"key": "file",
							"description": "big_avatar.jpg",
							"type": "file",
							"src": "postman-cloud:///1f09d616-7a5e-4800-a117-47ace92e7533"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data = pm.response.json();\r",
							"\r",
							"// Код ответа\r",
							"pm.test(\"Avatar update responded with 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка, что пришёл id\r",
							"pm.test(\"User has valid id\", function () {\r",
							"    pm.expect(data).to.have.property(\"id\");\r",
							"    pm.expect(data.id).to.be.a(\"number\");\r",
							"    pm.expect(data.id).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка username\r",
							"pm.test(\"User has username\", function () {\r",
							"    pm.expect(data).to.have.property(\"username\");\r",
							"    pm.expect(data.username).to.be.a(\"string\");\r",
							"    pm.expect(data.username.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка email\r",
							"pm.test(\"User has valid email\", function () {\r",
							"    pm.expect(data).to.have.property(\"email\");\r",
							"    pm.expect(data.email).to.match(/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка created_at\r",
							"pm.test(\"User has created_at timestamp\", function () {\r",
							"    pm.expect(data).to.have.property(\"created_at\");\r",
							"    pm.expect(new Date(data.created_at).toString()).not.to.eql(\"Invalid Date\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка avatar\r",
							"pm.test(\"User has valid avatar URL\", function () {\r",
							"    pm.expect(data).to.have.property(\"avatar\");\r",
							"    pm.expect(data.avatar).to.match(/^https:\\/\\/res\\.cloudinary\\.com\\//);\r",
							"    pm.expect(data.avatar).to.include(`/ContactsAPI/${data.username}`);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка роли\r",
							"pm.test(\"User has role\", function () {\r",
							"    pm.expect(data).to.have.property(\"role\");\r",
							"    pm.expect([\"user\", \"admin\"]).to.include(data.role);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверка, что аватар реально изменился (если сохранили старый)\r",
							"let prevAvatar = pm.environment.get(\"prev_avatar_url\");\r",
							"if (prevAvatar) {\r",
							"    pm.test(\"Avatar updated compared to previous\", function () {\r",
							"        pm.expect(data.avatar).to.not.eql(prevAvatar);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Обновляем текущий аватар в Env для следующих тестов\r",
							"pm.environment.set(\"prev_avatar_url\", data.avatar);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Avatar updated\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"//     var json = pm.response.json();\r",
							"//     pm.expect(json.avatar_url).to.include(\"cloudinary\");\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Avatar updated\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"\r",
							"//     const json = pm.response.json();\r",
							"\r",
							"//     pm.expect(json).to.have.property(\"avatar_url\");\r",
							"//     pm.expect(json.avatar_url).to.include(\"ava_default.jpg\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar without file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[patch_inv_ava] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_inv_ava] Request without file is rejected - message\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/validation failed/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_inv_ava] Request without file is rejected - details\", function () {\r",
							"    pm.expect([400, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.details[0].msg).to.match(/field required/i);  \r",
							"    pm.expect(jsonData.error.details[0].type).to.match(/missing/i); \r",
							"    pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"file\"]); \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_inv_ava] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/avatar`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PATCH\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar .txt_file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[patch_txt_ava] Status code is 415\", function () {\r",
							"    pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_txt_ava] Request invalid file.txt format is rejected - message\", function () {\r",
							"    pm.expect([415, 422]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/unsupported media type/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_txt_ava] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/avatar`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PATCH\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[patch_txt_ava] Request invalid file format is rejected - details\", function () {\r",
							"//     pm.expect([415, 422]).to.include(pm.response.code);\r",
							"//     let jsonData = pm.response.json();\r",
							"\r",
							"//     pm.expect(jsonData.error.details[0].msg).to.match(/field required/i);  \r",
							"//     pm.expect(jsonData.error.details[0].type).to.match(/missing/i); \r",
							"//     pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"file\"]); \r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						},
						{
							"key": "file",
							"description": "tets.txt",
							"type": "file",
							"src": "postman-cloud:///1f09d5a9-9db0-42d0-a21c-bd9e0b5de5ab"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar large file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[patch_large_ava] Status code is 413\", function () {\r",
							"    pm.response.to.have.status(413);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_large_ava] Too large file is rejected - message\", function () {\r",
							"    pm.expect([413]).to.include(pm.response.code);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error.message).to.match(/file too large/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[patch_large_ava] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/avatar`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PATCH\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"[patch_large_ava] Too large file is rejected - details\", function () {\r",
							"//     pm.expect([413]).to.include(pm.response.code);\r",
							"//     let jsonData = pm.response.json();\r",
							"\r",
							"//     pm.expect(jsonData.error.details[0].msg).to.match(/field required/i);  \r",
							"//     pm.expect(jsonData.error.details[0].type).to.match(/missing/i); \r",
							"//     pm.expect(jsonData.error.details[0].loc).to.eql([\"body\", \"file\"]); \r",
							"// });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052",
							"disabled": true
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						},
						{
							"key": "file",
							"description": "tets.txt",
							"type": "file",
							"src": "postman-cloud:///1f09d5a9-9db0-42d0-a21c-bd9e0b5de5ab",
							"disabled": true
						},
						{
							"key": "file",
							"description": "big_avatar.jpg",
							"type": "file",
							"src": "postman-cloud:///1f09d616-7a5e-4800-a117-47ace92e7533"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users - no admin (USER)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[user_get_users_403] Error object is present in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[user_get_users_403] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(403);\r",
							"    pm.expect(jsonData.error.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Forbidden\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[user_get_users_403] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"GET\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[user_get_users_403] Timestamp is present and valid string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"// Performance\r",
							"pm.test(\"[user_get_users_403] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Users are sorted by ID ascending\", function () {\r",
							"//     pm.expect(pm.response.code).to.eql(200);  \r",
							"\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData).to.be.an(\"array\");    \r",
							"    \r",
							"//     for (let i = 1; i < jsonData.length; i++) {\r",
							"//         pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"//     }\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"Users are sorted by ID ascending\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     for (let i = 1; i < jsonData.length; i++) {\r",
							"//         pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"//     }\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "change of role no admin (USER)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[moderator_change_role] Moderator forbidden to change roles (status)\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_change_role] Error response structure\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    // let expectedUserId = pm.environment.get(\"user_id\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 403);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Forbidden\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/users/1/role\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"PATCH\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_change_role] Error path contains correct user id\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    // let expectedUserId = pm.environment.get(\"user_id\");\r",
							"    pm.expect(jsonData.error.path).to.include(\"/api/users/1/role\");\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_change_role] Moderator cannot escalate to admin\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.match(/forbidden/i);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"moderator\"\r\n}\r\n\r\n// [\"admin\", \"moderator\", \"user\"]"
				},
				"url": {
					"raw": "{{base_url}}/api/users/1/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"1",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[logout] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout] Response contains avatar_url\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout] Avatar URL is a string\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.message).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout] Avatar URL has correct Cloudinary format\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.message).to.match(/successfully logged out/i);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/auth/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "contacts - in 15 min - logout (inv_token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[logout_401] Error object is present in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout_401] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(401);\r",
							"    pm.expect(jsonData.error.message).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Invalid token\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout_401] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/contacts/`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"GET\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout_401] Timestamp is present and valid string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"// Performance\r",
							"pm.test(\"[logout_401] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "login as ADMIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// seve response data to environment variables:\r",
							"// {{access_token}} and {{refresh_token}}\r",
							"let jsonData = pm.response.json();\r",
							"// save tokens and time to environment variables\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);\r",
							"pm.environment.set(\"token_time\", Date.now());\r",
							"\r",
							"console.log(\"Login successful → tokens saved\");\r",
							"\r",
							"\r",
							"// test for successful login response\r",
							"pm.test(\"[admin_login] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens present\r",
							"\r",
							"// Access token valid JWT format\r",
							"pm.test(\"[admin_login] Access token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"\r",
							"    let parts = jsonData.access_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Access token header is valid base64\r",
							"pm.test(\"[admin_login] Access token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let header = jsonData.access_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token valid JWT format\r",
							"pm.test(\"[admin_login] Refresh token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"\r",
							"    let parts = jsonData.refresh_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token header is valid base64\r",
							"pm.test(\"[admin_login] Refresh token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.refresh_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    \r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: token_type is 'bearer'\r",
							"pm.test(\"[admin_login] Token_type is 'bearer'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
							"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: access_token issued\r",
							"pm.test(\"[admin_login] Access token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"    pm.expect(jsonData.access_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check: refresh_token issued\r",
							"pm.test(\"[admin_login] Refresh token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"    pm.expect(jsonData.refresh_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Tokens updated compared to previous\r",
							"\r",
							"// Check if Access token are updated:\r",
							"let prevAccess = pm.environment.get(\"prev_access_token\");\r",
							"pm.test(\"[admin_login] Access token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevAccess, \"prev_access_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevAccess);\r",
							"});\r",
							"\r",
							"\r",
							"// Check if Refresh token are updated:\r",
							"let prevRefresh = pm.environment.get(\"prev_refresh_token\");\r",
							"pm.test(\"[admin_login] Refresh token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevRefresh, \"prev_refresh_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevRefresh);\r",
							"});\r",
							"\r",
							"\r",
							"// Check: time updated\r",
							"let tokenTime = parseInt(pm.environment.get(\"token_time\"));\r",
							"pm.test(\"[admin_login] Token time is set\", function () {\r",
							"    pm.expect(tokenTime).to.be.a(\"number\");\r",
							"    pm.expect(tokenTime).to.be.closeTo(Date.now(), 2000); // permissible difference is 2 seconds\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"userEmail\", \"test@email.com\");\r",
							"\r",
							"// // \"{{newUserPassword}}\"\r",
							"// pm.environment.set(\"newUserPassword\", \"MyNewSecretPass123\");\r",
							"\r",
							"// Save the old token values ​​(if any)\r",
							"pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"admin@api.com\",\r\n  \"password\": \"MyStrongPassword123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --- Base checks ---\r",
							"pm.test(\"[admin_get_users] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"[admin_get_users] Response is array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"// --- Sorting & uniqueness ---\r",
							"pm.test(\"[admin_get_users] Users are sorted by ID ascending\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (let i = 1; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"[admin_get_users] All user IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var ids = jsonData.map(u => u.id);\r",
							"    var uniqueIds = new Set(ids);\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"// --- Required fields ---\r",
							"pm.test(\"[admin_get_users] All required fields are present and not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(u => {\r",
							"        pm.expect(u).to.have.property(\"id\");\r",
							"        pm.expect(u).to.have.property(\"username\");\r",
							"        pm.expect(u).to.have.property(\"email\");\r",
							"        pm.expect(u).to.have.property(\"created_at\");\r",
							"        pm.expect(u).to.have.property(\"role\");\r",
							"\r",
							"        // Check that the strings are not empty.\r",
							"        pm.expect(u.username).to.be.a(\"string\");\r",
							"        pm.expect(u.email).to.be.a(\"string\");\r",
							"        pm.expect(u.role).to.be.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// --- Data type checks ---\r",
							"pm.test(\"[admin_get_users] All fields have correct types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(u => {\r",
							"        pm.expect(u.id).to.be.a(\"number\");\r",
							"        pm.expect(u.username).to.be.a(\"string\");\r",
							"        pm.expect(u.email).to.be.a(\"string\");\r",
							"        pm.expect(u.created_at).to.be.a(\"string\");\r",
							"        pm.expect(u.role).to.be.a(\"string\");\r",
							"        pm.expect(u.avatar === null || typeof u.avatar === \"string\").to.be.true;\r",
							"        // pm.expect([null, \"string\"]).to.include(typeof u.avatar);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// --- Avatar URL check ---\r",
							"pm.test(\"[admin_get_users] Avatar is null or valid Cloudinary URL\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(u => {\r",
							"        if (u.avatar === null) {\r",
							"            pm.expect(u.avatar).to.be.null;\r",
							"        } else {\r",
							"            pm.expect(u.avatar).to.be.a(\"string\");\r",
							"            pm.expect(u.avatar).to.match(/^https:\\/\\/res\\.cloudinary\\.com\\//);\r",
							"            pm.expect(u.avatar).to.match(/\\.(jpg|jpeg|png|webp)$/i);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// --- Email format check ---\r",
							"pm.test(\"[admin_get_users] All emails have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(u => {\r",
							"        pm.expect(u.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// --- Performance checks ---\r",
							"pm.test(\"[admin_get_users] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"[admin_get_users] Response size under 1MB\", function () {\r",
							"    pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							"\r",
							"// --- Save first user to env ---\r",
							"var jsonData = pm.response.json();\r",
							"if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"    var first = jsonData[1]; //берём второго, не первого\r",
							"    pm.environment.set(\"user_id\", first.id);\r",
							"    pm.environment.set(\"user_username\", first.username);\r",
							"    pm.environment.set(\"user_email\", first.email);\r",
							"    pm.environment.set(\"user_created_at\", first.created_at);\r",
							"    pm.environment.set(\"user_avatar\", first.avatar);\r",
							"    pm.environment.set(\"user_role\", first.role);\r",
							"\r",
							"    console.log(\"Saved first user data:\", first);\r",
							"\r",
							"    pm.test(`[admin_get_users] Saved user ID ${first.id} from the list`, function () {\r",
							"        pm.expect(first).to.have.property(\"id\");\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"Response has no users, nothing saved\");\r",
							"}\r",
							"\r",
							"\r",
							"// Check: response schema\r",
							"const userSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"id\", \"username\", \"email\", \"role\"],\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"username\": { \"type\": [\"string\", \"null\"], \"maxLength\": 32 },\r",
							"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"role\": { \"type\": \"string\", \"enum\": [\"user\", \"admin\", \"moderator\"] },\r",
							"        \"avatar\": { \"type\": [\"string\", \"null\"] },\r",
							"        \"created_at\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"[first_login] Response matches Users Schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(loginResponseSchema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "change of role (ADMIN)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[admin_change_role] Successfully change user role\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"created_at\");\r",
							"    pm.expect(jsonData).to.have.property(\"avatar\");\r",
							"    pm.expect(jsonData).to.have.property(\"role\");\r",
							"\r",
							"    // Check that the strings are not empty.\r",
							"    pm.expect(jsonData.username).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.email).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.role).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.created_at).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.avatar === null || typeof jsonData.avatar === \"string\").to.be.true;\r",
							"\r",
							"    // Check that the new role has actually changed\r",
							"    pm.expect(jsonData.role).to.eql(\"moderator\");  // role sent in the body\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[admin_change_role] Correct user was updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let expectedUserId = parseInt(pm.environment.get(\"user_id\"));\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(expectedUserId);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[admin_change_role] Response is a single user object\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an(\"object\");  // not an array\r",
							"    pm.expect(jsonData).to.not.be.an(\"array\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"moderator\"\r\n}\r\n\r\n// [\"admin\", \"moderator\", \"user\"]"
				},
				"url": {
					"raw": "{{base_url}}/api/users/{{user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "change of invalid role",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"[change_inv_role] Status code is 422\", function () {\r",
							"//     pm.response.to.have.status(422);\r",
							"// });\r",
							"\r",
							"pm.test(\"[change_inv_role] Invalid role value is rejected with 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"\r",
							"    // details:\r",
							"    let details = jsonData.error.details[0];\r",
							"    pm.expect(details.loc).to.eql([\"body\", \"role\"]);\r",
							"    pm.expect(details.msg).to.eql(\"Input should be 'admin', 'moderator' or 'user'\"); \r",
							"    pm.expect(details.type).to.match(/enum/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[change_inv_role] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let user = pm.environment.get(\"user_id\");\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/${user}/role`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PATCH\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"general\"\r\n}\r\n\r\n// [\"admin\", \"moderator\", \"user\"]"
				},
				"url": {
					"raw": "{{base_url}}/api/users/{{user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "change of empty role",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"[change_empty_role] Status code is 422\", function () {\r",
							"//     pm.response.to.have.status(422);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[change_empty_role] Invalid role value is rejected with 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 422);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Validation failed\");\r",
							"\r",
							"    // details:\r",
							"    let details = jsonData.error.details[0];\r",
							"    pm.expect(details.loc).to.eql([\"body\", \"role\"]);\r",
							"    pm.expect(details.msg).to.eql(\"Input should be 'admin', 'moderator' or 'user'\"); \r",
							"    pm.expect(details.type).to.match(/enum/i);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[change_empty_role] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let user = pm.environment.get(\"user_id\");\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/${user}/role`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PATCH\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"\"\r\n}\r\n\r\n// [\"admin\", \"moderator\", \"user\"]"
				},
				"url": {
					"raw": "{{base_url}}/api/users/{{user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "сhange role of non-existing user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[сhange role of non-existing user] Status code is 404 on repeat delete\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[сhange role of non-existing user] Error object is present in response\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[сhange role of non-existing user] Error code and message are correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.code).to.eql(404);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"User not found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[сhange role of non-existing user] Error contains correct path and method\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/4242/role`);\r",
							"    pm.expect(jsonData.error.method).to.eql(\"PATCH\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[сhange role of non-existing user] Timestamp is present and valid string\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"    pm.expect(jsonData.error.timestamp).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"moderator\"\r\n}\r\n\r\n// [\"admin\", \"moderator\", \"user\"]"
				},
				"url": {
					"raw": "{{base_url}}/api/users/4242/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"4242",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "login as MODERATOR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// seve response data to environment variables:\r",
							"// {{access_token}} and {{refresh_token}}\r",
							"let jsonData = pm.response.json();\r",
							"// save tokens and time to environment variables\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);\r",
							"pm.environment.set(\"token_time\", Date.now());\r",
							"\r",
							"console.log(\"Login successful → tokens saved\");\r",
							"\r",
							"\r",
							"// test for successful login response\r",
							"pm.test(\"[admin_login] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens present\r",
							"\r",
							"// Access token valid JWT format\r",
							"pm.test(\"[admin_login] Access token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"\r",
							"    let parts = jsonData.access_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Access token header is valid base64\r",
							"pm.test(\"[admin_login] Access token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let header = jsonData.access_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token valid JWT format\r",
							"pm.test(\"[admin_login] Refresh token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"\r",
							"    let parts = jsonData.refresh_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token header is valid base64\r",
							"pm.test(\"[admin_login] Refresh token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.refresh_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    \r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: token_type is 'bearer'\r",
							"pm.test(\"[admin_login] Token_type is 'bearer'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
							"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: access_token issued\r",
							"pm.test(\"[admin_login] Access token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"    pm.expect(jsonData.access_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check: refresh_token issued\r",
							"pm.test(\"[admin_login] Refresh token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"    pm.expect(jsonData.refresh_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Tokens updated compared to previous\r",
							"\r",
							"// Check if Access token are updated:\r",
							"let prevAccess = pm.environment.get(\"prev_access_token\");\r",
							"pm.test(\"[admin_login] Access token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevAccess, \"prev_access_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevAccess);\r",
							"});\r",
							"\r",
							"\r",
							"// Check if Refresh token are updated:\r",
							"let prevRefresh = pm.environment.get(\"prev_refresh_token\");\r",
							"pm.test(\"[admin_login] Refresh token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevRefresh, \"prev_refresh_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevRefresh);\r",
							"});\r",
							"\r",
							"\r",
							"// Check: time updated\r",
							"let tokenTime = parseInt(pm.environment.get(\"token_time\"));\r",
							"pm.test(\"[admin_login] Token time is set\", function () {\r",
							"    pm.expect(tokenTime).to.be.a(\"number\");\r",
							"    pm.expect(tokenTime).to.be.closeTo(Date.now(), 2000); // permissible difference is 2 seconds\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"userEmail\", \"test@email.com\");\r",
							"\r",
							"// // \"{{newUserPassword}}\"\r",
							"// pm.environment.set(\"newUserPassword\", \"MyNewSecretPass123\");\r",
							"\r",
							"// Save the old token values ​​(if any)\r",
							"pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"moderator@api.com\",\r\n  \"password\": \"moderator123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "change of role (MODERATOR)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[moderator_change_role] Moderator forbidden to change roles (status)\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_change_role] Error response structure\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let expectedUserId = pm.environment.get(\"user_id\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 403);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Forbidden\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(`/api/users/${expectedUserId}/role`);\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"PATCH\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_change_role] Error path contains correct user id\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let expectedUserId = pm.environment.get(\"user_id\");\r",
							"\r",
							"    pm.expect(jsonData.error.path).to.include(`/api/users/${expectedUserId}/role`);\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_change_role] Moderator cannot escalate to admin\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.match(/forbidden/i);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": \"admin\"\r\n}\r\n\r\n// [\"admin\", \"moderator\", \"user\"]"
				},
				"url": {
					"raw": "{{base_url}}/api/users/{{user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users (MODERATOR)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[moderator_get_users] Moderator forbidden to get users (status)\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"[moderator_get_users] Error response structure\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 403);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\", \"Forbidden\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/users\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"GET\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[moderator_get_users] Moderator cannot escalate to admin\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.match(/forbidden/i);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "user avatar (MODERATOR)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.environment.set(\"avatarPath\", \"F:\\\\_repository_\\\\goit-web-hw-13\\\\src\\\\static\\\\ava_default.jpg\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let data = pm.response.json();\r",
							"\r",
							"// Код ответа\r",
							"pm.test(\"[put_ava_moderator] Avatar update responded with 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Поле avatar_url существует\r",
							"pm.test(\"[put_ava_moderator] Response contains avatar_url\", function () {\r",
							"    pm.expect(data).to.have.property(\"avatar_url\");\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — строка\r",
							"pm.test(\"[put_ava_moderator] Avatar URL is a string\", function () {\r",
							"    pm.expect(data.avatar_url).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — корректный Cloudinary URL\r",
							"pm.test(\"[put_ava_moderator] Avatar URL has correct Cloudinary format\", function () {\r",
							"    pm.expect(data.avatar_url).to.match(/^https:\\/\\/res\\.cloudinary\\.com\\//);\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — содержит папку avatars/ContactsAPI\r",
							"pm.test(\"[put_ava_moderator] Avatar URL contains expected path\", function () {\r",
							"    pm.expect(data.avatar_url).to.include(\"/avatars/ContactsAPI/\");\r",
							"});\r",
							"\r",
							"\r",
							"// avatar_url — оканчивается на имя пользователя + расширение .jpg/.png\r",
							"let userName = pm.environment.get(\"user_name\");\r",
							"if (userName) {\r",
							"    pm.test(\"[put_ava_moderator] Avatar URL ends with username and extension\", function () {\r",
							"        pm.expect(data.avatar_url).to.match(new RegExp(`${userName}\\\\.(jpg|jpeg|png|gif)$`, \"i\"));\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"// Сравнение с предыдущим значением (если есть)\r",
							"let prevAvatarUpload = pm.environment.get(\"prev_avatar_url\");\r",
							"if (prevAvatarUpload) {\r",
							"    pm.test(\"[put_ava_moderator] Avatar URL changed compared to previous\", function () {\r",
							"        pm.expect(data.avatar_url).to.not.eql(prevAvatarUpload);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Обновляем Env для следующих тестов\r",
							"pm.environment.set(\"prev_avatar_url\", data.avatar_url);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Avatar updated\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"//     var json = pm.response.json();\r",
							"//     pm.expect(json.avatar_url).to.include(\"cloudinary\");\r",
							"// });\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Avatar updated\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"\r",
							"//     const json = pm.response.json();\r",
							"\r",
							"//     pm.expect(json).to.have.property(\"avatar_url\");\r",
							"//     pm.expect(json.avatar_url).to.include(\"ava_default.jpg\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "ava_default.jpg",
							"type": "file",
							"src": "postman-cloud:///1f08a971-c447-4a70-8a37-9e32309bd052"
						},
						{
							"key": "file",
							"description": "pach_check.png",
							"type": "file",
							"src": "postman-cloud:///1f08a972-9d40-4160-9204-08dd85f2671b",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/users/avatar",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"avatar"
					]
				}
			},
			"response": []
		},
		{
			"name": "get emails - MAILTRAP_INBOX",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// let userEmail = pm.environment.get(\"user_email\");\r",
							"\r",
							"// pm.sendRequest({\r",
							"//     url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages`,\r",
							"//     method: \"GET\",\r",
							"//     header: {\r",
							"//         \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//     }\r",
							"// }, function (err, res) {\r",
							"//     if (!err && res.code === 200) {\r",
							"//         let messages = res.json();\r",
							"\r",
							"//         // filtered by email and subject containing \"Confirm your email\"\r",
							"//         let filtered = messages.filter(m => \r",
							"//             m.to_email === userEmail && m.subject.includes(\"Confirm your email\")\r",
							"//         );\r",
							"\r",
							"//         if (filtered.length > 0) {\r",
							"//             let msgId = filtered[0].id;\r",
							"//             console.log(\"Found confirm email for:\", userEmail, \"msgId:\", msgId);\r",
							"\r",
							"//             // email by ID\r",
							"//             pm.sendRequest({\r",
							"//                 url: `https://mailtrap.io/api/accounts/${pm.environment.get(\"MAILTRAP_ACCOUNT_ID\")}/inboxes/${pm.environment.get(\"MAILTRAP_INBOX_ID\")}/messages/${msgId}/body.html`,\r",
							"//                 method: \"GET\",\r",
							"//                 header: {\r",
							"//                     \"Authorization\": \"Bearer \" + pm.environment.get(\"MAILTRAP_API_TOKEN\")\r",
							"//                 }\r",
							"//             }, function (err2, res2) {\r",
							"//                 if (!err2 && res2.code === 200) {\r",
							"//                     let html = res2.text();\r",
							"//                     let match = html.match(/confirmed_email\\/([A-Za-z0-9\\-\\._]+)/);\r",
							"//                     if (match) {\r",
							"//                         let token = match[1];\r",
							"//                         pm.environment.set(\"confirm_token\", token);\r",
							"//                         console.log(\"Confirm token saved:\", token);\r",
							"//                     }\r",
							"//                 }\r",
							"//             });\r",
							"//         } else {\r",
							"//             console.warn(\"No confirm email found for:\", userEmail);\r",
							"//         }\r",
							"//     }\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[mailtrap] Status 200\", () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"[mailtrap] At least one message found\", () => {\r",
							"    let msgs = pm.response.json();\r",
							"    pm.expect(msgs.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"[mailtrap] Latest message has correct subject\", () => {\r",
							"    let msg = pm.response.json()[0];\r",
							"    pm.expect([\"Confirm your email\", \"Reset your password\"]).to.include(msg.subject);\r",
							"});\r",
							"\r",
							"pm.test(\"[mailtrap] Recipient is correct\", () => {\r",
							"    let msg = pm.response.json()[0];\r",
							"    pm.expect(msg.to_email).to.eql(pm.environment.get(\"user_email\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{MAILTRAP_API_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://mailtrap.io/api/accounts/{{MAILTRAP_ACCOUNT_ID}}/inboxes/{{MAILTRAP_INBOX_ID}}/messages",
					"protocol": "https",
					"host": [
						"mailtrap",
						"io"
					],
					"path": [
						"api",
						"accounts",
						"{{MAILTRAP_ACCOUNT_ID}}",
						"inboxes",
						"{{MAILTRAP_INBOX_ID}}",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "login USER",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Save the old token values ​​(if any)\r",
							"pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// /**\r",
							"//  * Pre-request for LOGIN\r",
							"//  *\r",
							"//  * - Saves old tokens (if any) before login\r",
							"//  * - Inserts email + password into body\r",
							"//  */\r",
							"\r",
							"\r",
							"// // Save old tokens for comparison\r",
							"// pm.environment.set(\"prev_access_token\", pm.environment.get(\"access_token\") || \"\");\r",
							"// pm.environment.set(\"prev_refresh_token\", pm.environment.get(\"refresh_token\") || \"\");\r",
							"\r",
							"// // Safety checks\r",
							"// if (!email) {\r",
							"//     console.error(\"❌ user_email not set in environment\");\r",
							"// }\r",
							"// if (!password) {\r",
							"//     console.error(\"❌ userPassword not set in environment\");\r",
							"// }\r",
							"\r",
							"// console.log(\"----- Login pre-request with email:\", email);\r",
							"\r",
							"// // Update body of request\r",
							"// pm.request.body.update(JSON.stringify({\r",
							"//     email: pm.environment.get(\"user_email\"),\r",
							"//     password: pm.environment.get(\"newUserPassword\")\r",
							"// }));\r",
							"\r",
							"// // Content-Type\r",
							"// pm.request.headers.upsert({\r",
							"//     key: \"Content-Type\",\r",
							"//     value: \"application/json\"\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// seve response data to environment variables:\r",
							"// {{access_token}} and {{refresh_token}}\r",
							"let jsonData = pm.response.json();\r",
							"// save tokens and time to environment variables\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);\r",
							"pm.environment.set(\"token_time\", Date.now());\r",
							"\r",
							"console.log(\"Login successful → tokens saved\");\r",
							"\r",
							"\r",
							"// test for successful login response\r",
							"pm.test(\"[first_login] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens present\r",
							"\r",
							"// Access token valid JWT format\r",
							"pm.test(\"[first_login] Access token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"\r",
							"    let parts = jsonData.access_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Access token header is valid base64\r",
							"pm.test(\"[first_login] Access token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let header = jsonData.access_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token valid JWT format\r",
							"pm.test(\"[first_login] Refresh token is a valid JWT format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"\r",
							"    let parts = jsonData.refresh_token.split(\".\");\r",
							"    pm.expect(parts.length).to.eql(3); // header.payload.signature\r",
							"});\r",
							"\r",
							"\r",
							"// Refresh token header is valid base64\r",
							"pm.test(\"[first_login] Refresh token header is valid base64\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let header = jsonData.refresh_token.split(\".\")[0];\r",
							"    let decoded = JSON.parse(atob(header));\r",
							"    \r",
							"    pm.expect(decoded).to.have.property(\"alg\");\r",
							"    pm.expect(decoded).to.have.property(\"typ\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: token_type is 'bearer'\r",
							"pm.test(\"[first_login] Token_type is 'bearer'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
							"    pm.expect(jsonData.token_type).to.eql(\"bearer\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check: access_token issued\r",
							"pm.test(\"[first_login] Access token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"    pm.expect(jsonData.access_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check: refresh_token issued\r",
							"pm.test(\"[first_login] Refresh token present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
							"    pm.expect(jsonData.refresh_token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"// Tokens updated compared to previous\r",
							"\r",
							"// Check if Access token are updated:\r",
							"let prevAccess = pm.environment.get(\"prev_access_token\");\r",
							"pm.test(\"[first_login] Access token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevAccess, \"prev_access_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevAccess);\r",
							"});\r",
							"\r",
							"\r",
							"// Check if Refresh token are updated:\r",
							"let prevRefresh = pm.environment.get(\"prev_refresh_token\");\r",
							"pm.test(\"[first_login] Refresh token updated\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(prevRefresh, \"prev_refresh_token is missing!\").to.not.be.undefined;\r",
							"    pm.expect(jsonData.refresh_token).to.not.eql(prevRefresh);\r",
							"});\r",
							"\r",
							"\r",
							"// Check: time updated\r",
							"let tokenTime = parseInt(pm.environment.get(\"token_time\"));\r",
							"pm.test(\"[first_login] Token time is set\", function () {\r",
							"    pm.expect(tokenTime).to.be.a(\"number\");\r",
							"    pm.expect(tokenTime).to.be.closeTo(Date.now(), 2000); // permissible difference is 2 seconds\r",
							"});\r",
							"\r",
							"\r",
							"// Check: response schema\r",
							"const loginResponseSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"access_token\", \"refresh_token\", \"token_type\"],\r",
							"    \"properties\": {\r",
							"        \"access_token\": { \"type\": \"string\" },\r",
							"        \"refresh_token\": { \"type\": \"string\" },\r",
							"        \"token_type\": { \"type\": \"string\", \"enum\": [\"bearer\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"[first_login] Response matches Login Schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(loginResponseSchema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"user@api.com\",\r\n  \"password\": \"MyStrongPassword123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get contacts - default_limit_10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // --- Bulk create 5 users ---\r",
							"// for (let i = 0; i < 5; i++) {\r",
							"//     let body = {\r",
							"//         first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"//         last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"//         email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"//         phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"//         birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"//         extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"//     };\r",
							"\r",
							" \r",
							"\r",
							"//     pm.sendRequest({\r",
							"//         url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\",\r",
							"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify(body)\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.error(\"Error creating user:\", err);\r",
							"//         } else {\r",
							"//             console.log(\"User created:\", res.json());\r",
							"//         }\r",
							"//     });\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[get_contacts_default_limit_10] Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check number of contacts returned is exactly 10\r",
							"pm.test(\"[get_contacts_default_limit_10] Exactly 10 contacts returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(10);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_default_limit_10] Returns max 10 contacts\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.at.most(10); // не больше 10\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get contacts - output limit=100",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // --- Bulk create 5 users ---\r",
							"// for (let i = 0; i < 5; i++) {\r",
							"//     let body = {\r",
							"//         first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"//         last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"//         email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"//         phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"//         birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"//         extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"//     };\r",
							"\r",
							" \r",
							"\r",
							"//     pm.sendRequest({\r",
							"//         url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\",\r",
							"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify(body)\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.error(\"Error creating user:\", err);\r",
							"//         } else {\r",
							"//             console.log(\"User created:\", res.json());\r",
							"//         }\r",
							"//     });\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check the status code\r",
							"pm.test(\"[get_contacts_limit_100] Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] Contacts list is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] Contacts are sorted by ID ascending\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (let i = 1; i < jsonData.length; i++) {\r",
							"        pm.expect(jsonData[i].id).to.be.above(jsonData[i - 1].id);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// // check that the last created contact is present and is the latest\r",
							"// pm.test(\"[get_contacts_limit_100] Last created contact is present and is the latest\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     var lastId = parseInt(pm.environment.get(\"last_contact_id\"));\r",
							"//     var lastContact = jsonData[jsonData.length - 1];\r",
							"//     pm.expect(lastContact.id).to.eql(lastId);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] All contact IDs are unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    // Collect all IDs into an array\r",
							"    var ids = jsonData.map(c => c.id);\r",
							"    // Create a Set (it stores only unique values)\r",
							"    var uniqueIds = new Set(ids);\r",
							"    // Check that the lengths match → no duplicates\r",
							"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] All required fields are not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, \"Contacts list should not be empty\").to.be.above(0);\r",
							"\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.not.be.empty;\r",
							"        pm.expect(c.last_name).to.not.be.empty;\r",
							"        pm.expect(c.email).to.not.be.empty;\r",
							"        pm.expect(c.phone).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] All contacts have correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.first_name).to.be.a(\"string\");\r",
							"        pm.expect(c.last_name).to.be.a(\"string\");\r",
							"        pm.expect(c.email).to.be.a(\"string\");\r",
							"        pm.expect(c.phone).to.be.a(\"string\");\r",
							"        pm.expect(c.birthday).to.be.a(\"string\");\r",
							"        pm.expect(c.extra).to.be.a(\"string\");\r",
							"        pm.expect(c.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] All phones have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.phone).to.match(/^\\+380\\d{9}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] Birthday has valid date format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] All emails have valid format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(c => {\r",
							"        pm.expect(c.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// check number of contacts returned is exactly 100\r",
							"pm.test(\"[get_contacts_limit_100] Exactly 100 contacts returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(100);\r",
							"});\r",
							"\r",
							"\r",
							"// check that the answer came faster than in 1000 ms\r",
							"pm.test(\"[get_contacts_limit_100] Response time is under 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] Response size under 1MB\", function () {\r",
							"    pm.expect(pm.response.size().body).to.be.below(1024 * 1024);\r",
							"});\r",
							"\r",
							"\r",
							"// save the current search_name for the next request \r",
							"var jsonData = pm.response.json();\r",
							"if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"    var first = jsonData[0]; // get the first contact\r",
							"    pm.environment.set(\"contact_id\", first.id);\r",
							"    pm.environment.set(\"contact_first_name\", first.first_name);\r",
							"    pm.environment.set(\"contact_last_name\", first.last_name);\r",
							"    pm.environment.set(\"contact_email\", first.email);\r",
							"    pm.environment.set(\"contact_phone\", first.phone);\r",
							"    pm.environment.set(\"contact_birthday\", first.birthday);\r",
							"    pm.environment.set(\"contact_extra\", first.extra);\r",
							"\r",
							"    console.log(\"Saved first contact Data:\", first);\r",
							"\r",
							"    pm.test(`[get_contacts_limit_100] Saved contact ID ${first.id} from the list`, function () {\r",
							"        pm.expect(first).to.have.property(\"id\");\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    console.warn(\"Response has no contacts, nothing saved\");   \r",
							"    // pm.environment.unset(\"contact_id\");\r",
							"}\r",
							"\r",
							"\r",
							"const contactSchema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\"],\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"first_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"last_name\": { \"type\": \"string\", \"minLength\": 1, \"maxLength\": 25 },\r",
							"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"        \"phone\": { \"type\": \"string\" },\r",
							"        \"birthday\": { \"type\": \"string\", \"pattern\": \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\" },\r",
							"        \"extra\": { \"type\": [\"string\", \"null\"] }\r",
							"    }\r",
							"};\r",
							"\r",
							"const contactsListSchema = {\r",
							"    \"type\": \"array\",\r",
							"    \"items\": contactSchema\r",
							"};\r",
							"\r",
							"pm.test(\"[get_contacts_limit_100] Response matches Contact schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(contactsListSchema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// var jsonData = pm.response.json();\r",
							"// // if this is an array, take the first_name of the first contact\r",
							"// if (Array.isArray(jsonData) && jsonData.length > 0) {\r",
							"//     pm.environment.set(\"search_name\", jsonData[0].first_name);\r",
							"//     console.log(\"Saved search_name:\", jsonData[0].first_name);\r",
							"// } else if (jsonData.first_name) {\r",
							"//     // if this is a single object\r",
							"//     pm.environment.set(\"search_name\", jsonData.first_name);\r",
							"//     console.log(\"Saved search_name:\", jsonData.first_name);\r",
							"// } else {\r",
							"//     console.warn(\"No first_name found in response\");\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // save the current search_name for the next request \r",
							"// var jsonData = pm.response.json();\r",
							"// if (jsonData.length > 0) {\r",
							"//     var first = jsonData[0]; // get the first contact\r",
							"//     pm.environment.set(\"contact_id\", first.id);\r",
							"//     pm.environment.set(\"contact_first_name\", first.first_name);\r",
							"//     pm.environment.set(\"contact_last_name\", first.last_name);\r",
							"//     pm.environment.set(\"contact_email\", first.email);\r",
							"//     pm.environment.set(\"contact_phone\", first.phone);\r",
							"//     pm.environment.set(\"contact_birthday\", first.birthday);\r",
							"//     pm.environment.set(\"contact_extra\", first.extra);\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts?limit=100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					],
					"query": [
						{
							"key": "limit",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get contacts - output limit=101",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// // randomPhoneNumber\r",
							"// // const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// // pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // --- Bulk create 5 users ---\r",
							"// for (let i = 0; i < 5; i++) {\r",
							"//     let body = {\r",
							"//         first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"//         last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"//         email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"//         phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"//         birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"//         extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"//     };\r",
							"\r",
							" \r",
							"\r",
							"//     pm.sendRequest({\r",
							"//         url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\",\r",
							"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify(body)\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.error(\"Error creating user:\", err);\r",
							"//         } else {\r",
							"//             console.log(\"User created:\", res.json());\r",
							"//         }\r",
							"//     });\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[get_contacts_limit_101] Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"[get_contacts_limit_101] Validation failed for limit > 100\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.code).to.eql(422);\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Validation failed\");\r",
							"    pm.expect(jsonData.error.details[0].loc).to.include(\"limit\");\r",
							"    pm.expect(jsonData.error.details[0].msg).to.include(\"less than or equal to 100\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/contacts?limit=101",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					],
					"query": [
						{
							"key": "limit",
							"value": "101"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts  - rate_limit - max_requests_25",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// randomPhoneNumber\r",
							"// const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"//\"{{randomPhoneNumber}}\"\r",
							"// Генерация случайного украинского номера телефона\r",
							"const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"const phone = `+380${operator}${number}`;\r",
							"pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"//\"{{randomBirthdayDate}}\"\r",
							"function getRandomDate(start, end) {\r",
							"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"    const yyyy = date.getFullYear();\r",
							"    const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"    const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"    return `${yyyy}-${mm}-${dd}`;\r",
							"}\r",
							"// Пример: дата между 1960-01-01 и 2005-12-31\r",
							"const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"//\"{{randomExtra}}\"\r",
							"// Возможные значения поля \"extra\"\r",
							"const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// Выбираем случайное значение\r",
							"const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// Сохраняем в переменную окружения\r",
							"pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"// --- Init counter if not exists ---\r",
							"if (!pm.environment.get(\"pre_created_count\")) {\r",
							"    pm.environment.set(\"pre_created_count\", 0);\r",
							"}\r",
							"\r",
							"// --- Bulk create 24 users ---\r",
							"for (let i = 0; i < 24; i++) {\r",
							"    let body = {\r",
							"        first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"        last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"        email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"        phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"        birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"        extra: \"pre_request\"\r",
							"    };\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\",\r",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: JSON.stringify(body)\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error creating user:\", err);\r",
							"        } else {\r",
							"            // увеличиваем счётчик только если статус 201\r",
							"            if (res.code === 201) {\r",
							"                let count = parseInt(pm.environment.get(\"pre_created_count\"), 10);\r",
							"                count++;\r",
							"                pm.environment.set(\"pre_created_count\", count);\r",
							"                console.log(\"User created (\" + count + \"):\", res.json());\r",
							"            } else {\r",
							"                console.warn(\"Failed:\", res.code, res.json());\r",
							"            }\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // --- Bulk create 26 users ---\r",
							"// for (let i = 0; i < 24; i++) {\r",
							"//     let body = {\r",
							"//         first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"//         last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"//         email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"//         phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"//         birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"//         // extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"//         extra: pm.variables.replaceIn(\"pre_request\")\r",
							"//     };\r",
							"\r",
							"//     pm.sendRequest({\r",
							"//         url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\",\r",
							"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify(body)\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.error(\"Error creating user:\", err);\r",
							"//         } else {\r",
							"//             console.log(\"User created:\", res.json());\r",
							"//         }\r",
							"//     });\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that 25 messages have been created, 24 in the pre-request and  +1 in request\r",
							"let preCreated = parseInt(pm.environment.get(\"pre_created_count\"), 10);\r",
							"let total = preCreated + 1;\r",
							"\r",
							"pm.test(`[add_contacts_limiter_test_max_25] Created contacts total = ${total}`, function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"    pm.expect(total).to.eql(25);\r",
							"});\r",
							"\r",
							"// Reset the counter so that the next run starts from zero\r",
							"pm.environment.set(\"pre_created_count\", 0);\r",
							"\r",
							"\r",
							"// pm.test(\"25th request passes and limiter not yet exceeded\", function () {\r",
							"//     pm.response.to.have.status(201);\r",
							"\r",
							"//     let preCreated = parseInt(pm.environment.get(\"pre_created_count\"), 10);\r",
							"//     let total = preCreated + 1; // + текущий запрос\r",
							"//     pm.expect(total).to.eql(25);\r",
							"// });\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_limiter_test_max_25] Contact fields match input\", function () {\r",
							"    let requestBody = JSON.parse(pm.request.body.raw);\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.first_name).to.eql(requestBody.first_name);\r",
							"    pm.expect(jsonData.last_name).to.eql(requestBody.last_name);\r",
							"    pm.expect(jsonData.email).to.eql(requestBody.email);\r",
							"    pm.expect(jsonData.phone).to.eql(requestBody.phone);\r",
							"    pm.expect(jsonData.birthday).to.eql(requestBody.birthday);\r",
							"    pm.expect(jsonData.extra).to.eql(requestBody.extra);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_limiter_test_max_25] Email is unique\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.not.eql(pm.environment.get(\"last_email\"));\r",
							"    pm.environment.set(\"last_email\", jsonData.email);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_limiter_test_max_25] Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"[add_contacts_limiter_test_max_25] Response matches Contact Schema\", function () {\r",
							"    const schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\", \"birthday\"],\r",
							"        \"properties\": {\r",
							"            \"id\": { \"type\": \"integer\" },\r",
							"            \"first_name\": { \"type\": \"string\" },\r",
							"            \"last_name\": { \"type\": \"string\" },\r",
							"            \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
							"            \"phone\": { \"type\": \"string\" },\r",
							"            \"birthday\": { \"type\": \"string\" },\r",
							"            \"extra\": { \"type\": [\"string\", \"null\"] }\r",
							"        }\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // check the status code\r",
							"// pm.test(\"[add_contacts] Status code is 201 (Created)\", function () {\r",
							"//     pm.response.to.have.status(201);\r",
							"// });\r",
							"\r",
							"// // check that the body of the answer contains all key fields\r",
							"// pm.test(\"[add_contacts] Response has all contact fields\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"//     pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"//     pm.expect(jsonData).to.have.property(\"email\");\r",
							"//     pm.expect(jsonData).to.have.property(\"phone\");\r",
							"//     pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"//     pm.expect(jsonData).to.have.property(\"extra\");\r",
							"//     pm.expect(jsonData).to.have.property(\"id\");\r",
							"// });\r",
							"\r",
							"// // check that the email is in the correct format\r",
							"// pm.test(\"[add_contacts] Email is valid\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"// });\r",
							"\r",
							"// // check that the answer came faster than in 1000 ms\r",
							"// pm.test(\"[add_contacts] Response time is under 1000ms\", function () {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"// });\r",
							"\r",
							"\r",
							"// // check that the id is unique (does not match the previous one)\r",
							"// pm.test(\"[add_contacts] Contact ID is unique\", function () { \r",
							"// var jsonData = pm.response.json(); \r",
							"// var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"// if (lastId) { \r",
							"// pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"// } \r",
							"\r",
							"// // save the current id for the next request \r",
							"// pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts  - rate_limit +1__26_request_error_429",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// randomPhoneNumber\r",
							"// const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"// //\"{{randomPhoneNumber}}\"\r",
							"// // Генерация случайного украинского номера телефона\r",
							"// const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"// const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"// const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"// const phone = `+380${operator}${number}`;\r",
							"// pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"// //\"{{randomBirthdayDate}}\"\r",
							"// function getRandomDate(start, end) {\r",
							"//     const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"//     const yyyy = date.getFullYear();\r",
							"//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"//     const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"//     return `${yyyy}-${mm}-${dd}`;\r",
							"// }\r",
							"// // Пример: дата между 1960-01-01 и 2005-12-31\r",
							"// const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"// pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"// //\"{{randomExtra}}\"\r",
							"// // Возможные значения поля \"extra\"\r",
							"// const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// // Выбираем случайное значение\r",
							"// const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// // Сохраняем в переменную окружения\r",
							"// pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"// // --- Bulk create 26 users ---\r",
							"// for (let i = 0; i < 26; i++) {\r",
							"//     let body = {\r",
							"//         first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"//         last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"//         email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"//         phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"//         birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"//         extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"//     };\r",
							"\r",
							"//     pm.sendRequest({\r",
							"//         url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\",\r",
							"//             \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify(body)\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.error(\"Error creating user:\", err);\r",
							"//         } else {\r",
							"//             console.log(\"User created:\", res.json());\r",
							"//         }\r",
							"//     });\r",
							"// }\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_rate_limit_+1_request=26] Status is 429 Too Many Requests\", function () {\r",
							"    pm.response.to.have.status(429);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_rate_limit_+1_request=26] Error response structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 429);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\").that.match(/too many requests/i);\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_rate_limit_+1_request=26] Response does not contain user object\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.not.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.not.have.property(\"email\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // check the status code\r",
							"// pm.test(\"[add_contacts] Status code is 201 (Created)\", function () {\r",
							"//     pm.response.to.have.status(201);\r",
							"// });\r",
							"\r",
							"// // check that the body of the answer contains all key fields\r",
							"// pm.test(\"[add_contacts] Response has all contact fields\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"//     pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"//     pm.expect(jsonData).to.have.property(\"email\");\r",
							"//     pm.expect(jsonData).to.have.property(\"phone\");\r",
							"//     pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"//     pm.expect(jsonData).to.have.property(\"extra\");\r",
							"//     pm.expect(jsonData).to.have.property(\"id\");\r",
							"// });\r",
							"\r",
							"// // check that the email is in the correct format\r",
							"// pm.test(\"[add_contacts] Email is valid\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"// });\r",
							"\r",
							"// // check that the answer came faster than in 1000 ms\r",
							"// pm.test(\"[add_contacts] Response time is under 1000ms\", function () {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"// });\r",
							"\r",
							"\r",
							"// // check that the id is unique (does not match the previous one)\r",
							"// pm.test(\"[add_contacts] Contact ID is unique\", function () { \r",
							"// var jsonData = pm.response.json(); \r",
							"// var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"// if (lastId) { \r",
							"// pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"// } \r",
							"\r",
							"// // save the current id for the next request \r",
							"// pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add contacts  - rate_limit - too many requests_>25",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// const randomPhone = \"380\" + Math.floor(Math.random() * (999999999 - 100000000)) + 100000000; // Генерируем случайное число\r",
							"\r",
							"// randomPhoneNumber\r",
							"// const randomPhone = \"+380\" + Math.floor(Math.random() * (999999999 - 100000000)); // Генерируем случайное число\r",
							"// pm.environment.set(\"randomPhoneNumber\", randomPhone); // Сохраняем его в переменную\r",
							"\r",
							"\r",
							"//\"{{randomPhoneNumber}}\"\r",
							"// Генерация случайного украинского номера телефона\r",
							"const operatorCodes = [\"67\", \"68\", \"96\", \"97\", \"98\", \"99\", \"63\", \"73\", \"93\"]; // реальные коды операторов\r",
							"const operator = operatorCodes[Math.floor(Math.random() * operatorCodes.length)];\r",
							"const number = String(Math.floor(1000000 + Math.random() * 9000000)); // 7 цифр\r",
							"\r",
							"const phone = `+380${operator}${number}`;\r",
							"pm.environment.set(\"randomPhoneNumber\", phone);\r",
							"\r",
							"\r",
							"//\"{{randomBirthdayDate}}\"\r",
							"function getRandomDate(start, end) {\r",
							"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"    const yyyy = date.getFullYear();\r",
							"    const mm = String(date.getMonth() + 1).padStart(2, '0'); // месяц (0-based)\r",
							"    const dd = String(date.getDate()).padStart(2, '0'); // день\r",
							"    return `${yyyy}-${mm}-${dd}`;\r",
							"}\r",
							"// Пример: дата между 1960-01-01 и 2005-12-31\r",
							"const birthday = getRandomDate(new Date(1960, 0, 1), new Date(2005, 11, 31));\r",
							"pm.environment.set(\"randomBirthdayDate\", birthday);\r",
							"\r",
							"\r",
							"//\"{{randomExtra}}\"\r",
							"// Возможные значения поля \"extra\"\r",
							"const extras = [\"friend\", \"colleague\", \"family\", \"partner\"];\r",
							"// Выбираем случайное значение\r",
							"const randomExtra = extras[Math.floor(Math.random() * extras.length)];\r",
							"// Сохраняем в переменную окружения\r",
							"pm.environment.set(\"randomExtra\", randomExtra);\r",
							"\r",
							"\r",
							"\r",
							"// --- Bulk create 26 users ---\r",
							"for (let i = 0; i < 26; i++) {\r",
							"    let body = {\r",
							"        first_name: pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"        last_name: pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
							"        email: pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
							"        phone: pm.variables.replaceIn(\"{{randomPhoneNumber}}\"),\r",
							"        birthday: pm.variables.replaceIn(\"{{randomBirthdayDate}}\"),\r",
							"        extra: pm.variables.replaceIn(\"{{randomExtra}}\")\r",
							"    };\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"base_url\") + \"/api/contacts\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\",\r",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: JSON.stringify(body)\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error creating user:\", err);\r",
							"        } else {\r",
							"            console.log(\"User created:\", res.json());\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[add_contacts_rate_limit_>25_requests] Status is 429 Too Many Requests\", function () {\r",
							"    pm.response.to.have.status(429);\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_rate_limit_>25_requests] Error response structure is correct\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"code\", 429);\r",
							"    pm.expect(jsonData.error).to.have.property(\"message\").that.match(/too many requests/i);\r",
							"    pm.expect(jsonData.error).to.have.property(\"path\").that.includes(\"/api/contacts\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"method\", \"POST\");\r",
							"    pm.expect(jsonData.error).to.have.property(\"timestamp\");\r",
							"});\r",
							"\r",
							"pm.test(\"[add_contacts_rate_limit_>25_requests] Response does not contain user object\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.not.have.property(\"first_name\");\r",
							"    pm.expect(jsonData).to.not.have.property(\"email\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// // check the status code\r",
							"// pm.test(\"[add_contacts] Status code is 201 (Created)\", function () {\r",
							"//     pm.response.to.have.status(201);\r",
							"// });\r",
							"\r",
							"// // check that the body of the answer contains all key fields\r",
							"// pm.test(\"[add_contacts] Response has all contact fields\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData).to.have.property(\"first_name\");\r",
							"//     pm.expect(jsonData).to.have.property(\"last_name\");\r",
							"//     pm.expect(jsonData).to.have.property(\"email\");\r",
							"//     pm.expect(jsonData).to.have.property(\"phone\");\r",
							"//     pm.expect(jsonData).to.have.property(\"birthday\");\r",
							"//     pm.expect(jsonData).to.have.property(\"extra\");\r",
							"//     pm.expect(jsonData).to.have.property(\"id\");\r",
							"// });\r",
							"\r",
							"// // check that the email is in the correct format\r",
							"// pm.test(\"[add_contacts] Email is valid\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"// });\r",
							"\r",
							"// // check that the answer came faster than in 1000 ms\r",
							"// pm.test(\"[add_contacts] Response time is under 1000ms\", function () {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"// });\r",
							"\r",
							"\r",
							"// // check that the id is unique (does not match the previous one)\r",
							"// pm.test(\"[add_contacts] Contact ID is unique\", function () { \r",
							"// var jsonData = pm.response.json(); \r",
							"// var lastId = pm.environment.get(\"last_contact_id\"); \r",
							"\r",
							"// if (lastId) { \r",
							"// pm.expect(jsonData.id).to.not.eql(parseInt(lastId)); \r",
							"// } \r",
							"\r",
							"// // save the current id for the next request \r",
							"// pm.environment.set(\"last_contact_id\", jsonData.id);\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{access_token}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{randomPhoneNumber}}\",\r\n  \"birthday\": \"{{randomBirthdayDate}}\",\r\n  \"extra\": \"{{randomExtra}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/contacts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[logout] Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout] Response contains avatar_url\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout] Avatar URL is a string\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.message).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"[logout] Avatar URL has correct Cloudinary format\", function () {\r",
							"    let json = pm.response.json();\r",
							"    pm.expect(json.message).to.match(/successfully logged out/i);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/api/auth/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/**\r",
					" * Pre-request script with auto-refresh, header injection, and Postman tests\r",
					" */\r",
					"\r",
					"const ACCESS_LIFETIME = 14 * 60 * 1000; // 14 мин (safety margin < 15)\r",
					"let tokenTime = parseInt(pm.environment.get(\"token_time\") || \"0\");\r",
					"let now = Date.now();\r",
					"\r",
					"\r",
					"// --- Master toggle for refresh ---\r",
					"let autoRefresh = pm.environment.get(\"auto_refresh\");\r",
					"if (autoRefresh === \"false\") {\r",
					"    console.log(\">>>>> Auto-refresh disabled for this request\");\r",
					"    return;\r",
					"}\r",
					"\r",
					"\r",
					"let baseUrl = pm.environment.get(\"base_url\");\r",
					"let refreshToken = pm.environment.get(\"refresh_token\");\r",
					"// let mailtrap = \"https://mailtrap.io/api/accounts/\"\r",
					"\r",
					"\r",
					"// --- Filter: only run for requests to your API, skip external services (Mailtrap, Cloudinary etc.)\r",
					"\r",
					"let currentUrl = pm.variables.replaceIn(pm.request.url.toString());\r",
					"\r",
					"// --- Filter: only run for requests to API ---\r",
					"if (!currentUrl.startsWith(baseUrl)) {\r",
					"    console.log(\">>>>> Skipping refresh_token logic for external request:\", currentUrl);\r",
					"    return;\r",
					"}\r",
					"\r",
					"\r",
					"// --- Logging\r",
					"console.log(\">>>>> Pre-request check\", {\r",
					"    baseUrl,\r",
					"    refreshTokenPresent: !!refreshToken,\r",
					"    tokenTime,\r",
					"    elapsed_sec: (now - tokenTime) / 1000\r",
					"});\r",
					"\r",
					"// --- Safety checks\r",
					"if (!baseUrl) {\r",
					"    pm.test(\"[pre_refresh_token >>>] Base URL is configured\", function () {\r",
					"        pm.expect.fail(\"Base_url is not set in environment\");\r",
					"    });\r",
					"    return;\r",
					"}\r",
					"\r",
					"if (!refreshToken) {\r",
					"    pm.test(\"[pre_refresh_token >>>] Refresh token present\", function () {\r",
					"        pm.expect.fail(\"Refresh_token is not set, login required\");\r",
					"    });\r",
					"    return;\r",
					"}\r",
					"\r",
					"// --- Check token age\r",
					"if (now - tokenTime > ACCESS_LIFETIME) {\r",
					"    console.log(\">>>>> Access expired → trying refresh...\");\r",
					"\r",
					"    let refreshUrl = baseUrl.replace(/\\/$/, \"\") + \"/api/auth/refresh_token\";\r",
					"    console.log(\">>>>> Refresh URL:\", refreshUrl);\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: refreshUrl,\r",
					"        method: \"POST\",\r",
					"        auth: { type: \"noauth\" },  // disable auto Bearer\r",
					"        header: { \"Content-Type\": \"application/json\" },\r",
					"        body: {\r",
					"            mode: \"raw\",\r",
					"            raw: JSON.stringify({ refresh_token: refreshToken })\r",
					"        }\r",
					"    }, function (err, res) {\r",
					"        if (err) {\r",
					"            pm.test(\"[pre_refresh_token >>>] Refresh request executed\", function () {\r",
					"                pm.expect.fail(\"Refresh request failed: \" + err);\r",
					"            });\r",
					"            return;\r",
					"        }\r",
					"\r",
					"        pm.test(\"[pre_refresh_token >>>] Refresh responded with 200\", function () {\r",
					"            pm.expect(res.code).to.eql(200);\r",
					"        });\r",
					"\r",
					"        try {\r",
					"            let data = res.json();\r",
					"\r",
					"            pm.test(\"[pre_refresh_token >>>] New access token returned\", function () {\r",
					"                pm.expect(data).to.have.property(\"access_token\");\r",
					"            });\r",
					"\r",
					"            pm.test(\"[pre_refresh_token >>>] New refresh token returned\", function () {\r",
					"                pm.expect(data).to.have.property(\"refresh_token\");\r",
					"            });\r",
					"\r",
					"            // Compare with previous\r",
					"            let prevAccess = pm.environment.get(\"access_token\");\r",
					"            let prevRefresh = pm.environment.get(\"refresh_token\");\r",
					"\r",
					"            pm.test(\"[pre_refresh_token >>>] Access token is updated\", function () {\r",
					"                pm.expect(data.access_token).to.not.eql(prevAccess);\r",
					"            });\r",
					"\r",
					"            pm.test(\"[pre_refresh_token >>>] Refresh token is updated\", function () {\r",
					"                pm.expect(data.refresh_token).to.not.eql(prevRefresh);\r",
					"            });\r",
					"\r",
					"            // Extra test: check access_token looks like JWT\r",
					"            pm.test(\"[pre_refresh_token >>>] Access token is a valid JWT format\", function () {\r",
					"                let parts = data.access_token.split(\".\");\r",
					"                pm.expect(parts.length).to.eql(3);\r",
					"            });\r",
					"\r",
					"            // Save new values\r",
					"            pm.environment.set(\"access_token\", data.access_token);\r",
					"            pm.environment.set(\"refresh_token\", data.refresh_token);\r",
					"            pm.environment.set(\"token_time\", Date.now());\r",
					"\r",
					"            // Update Authorization header\r",
					"            pm.request.headers.upsert({\r",
					"                key: \"Authorization\",\r",
					"                value: `Bearer ${data.access_token}`\r",
					"            });\r",
					"\r",
					"            console.log(\">>>>> Tokens refreshed successfully!\");\r",
					"        } catch (e) {\r",
					"            pm.test(\"[pre_refresh_token >>>] Parse refresh response\", function () {\r",
					"                pm.expect.fail(\"Failed to parse refresh response: \" + e);\r",
					"            });\r",
					"        }\r",
					"    });\r",
					"} else {\r",
					"    console.log(\">>>>> Access token still valid, using current one\");\r",
					"\r",
					"    // Test: access token exists\r",
					"    pm.test(\"[pre_refresh_token >>>] Access token present\", function () {\r",
					"        pm.expect(pm.environment.get(\"access_token\")).to.be.ok;\r",
					"    });\r",
					"\r",
					"    // Update Authorization header\r",
					"    let access = pm.environment.get(\"access_token\");\r",
					"    if (access) {\r",
					"        pm.request.headers.upsert({\r",
					"            key: \"Authorization\",\r",
					"            value: `Bearer ${access}`\r",
					"        });\r",
					"        console.log(\">>>>> Authorization header set from environment token\");\r",
					"    } else {\r",
					"        console.warn(\">>>>> No access_token found in environment\");\r",
					"    }\r",
					"}\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"// /**\r",
					"//  * Pre-request script with auto-refresh and Authorization header injection\r",
					"//  */\r",
					"\r",
					"// const ACCESS_LIFETIME = 14 * 60 * 1000; // 14 мин (чуть меньше реальных 15)\r",
					"// let tokenTime = parseInt(pm.environment.get(\"token_time\") || \"0\");\r",
					"// let now = Date.now();\r",
					"\r",
					"// let baseUrl = pm.environment.get(\"base_url\");\r",
					"// let refreshToken = pm.environment.get(\"refresh_token\");\r",
					"\r",
					"// console.log(\">>>> Pre-request check\");\r",
					"// console.log(\"base_url:\", baseUrl);\r",
					"// console.log(\"refresh_token present:\", !!refreshToken);\r",
					"// console.log(\"token_time:\", tokenTime, \"elapsed:\", (now - tokenTime) / 1000, \"sec\");\r",
					"\r",
					"// // Safety: проверяем base_url\r",
					"// if (!baseUrl) {\r",
					"//     console.error(\"❌ base_url is not set in environment!\");\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// // Safety: проверяем refresh_token\r",
					"// if (!refreshToken) {\r",
					"//     console.warn(\">>>>>> No refresh_token set, login required\");\r",
					"//     return;\r",
					"// }\r",
					"\r",
					"// // Проверяем срок жизни access_token\r",
					"// if (now - tokenTime > ACCESS_LIFETIME) {\r",
					"//     console.log(\">>>> Access expired → trying refresh...\");\r",
					"\r",
					"//     let refreshUrl = baseUrl.replace(/\\/$/, \"\") + \"/api/auth/refresh_token\";\r",
					"//     console.log(\"Refresh URL:\", refreshUrl);\r",
					"\r",
					"//     pm.sendRequest({\r",
					"//         url: refreshUrl,\r",
					"//         method: \"POST\",\r",
					"//         auth: { type: \"noauth\" },  // отключаем автоматический Bearer\r",
					"//         header: { \"Content-Type\": \"application/json\" },\r",
					"//         body: {\r",
					"//             mode: \"raw\",\r",
					"//             raw: JSON.stringify({ refresh_token: refreshToken })\r",
					"//         }\r",
					"//     }, function (err, res) {\r",
					"//         if (err) {\r",
					"//             console.error(\"❌ Refresh request failed:\", err);\r",
					"//             return;\r",
					"//         }\r",
					"\r",
					"//         console.log(\"Refresh response code:\", res.code);\r",
					"//         console.log(\"Refresh response raw:\", res.text());\r",
					"\r",
					"//         try {\r",
					"//             let data = res.json();\r",
					"\r",
					"//             if (res.code === 200) {\r",
					"//                 pm.environment.set(\"access_token\", data.access_token);\r",
					"//                 pm.environment.set(\"refresh_token\", data.refresh_token);\r",
					"//                 pm.environment.set(\"token_time\", Date.now());\r",
					"//                 console.log(\">>>> Tokens refreshed successfully!\");\r",
					"\r",
					"//                 // Обновление Authorization прямо для текущего запроса\r",
					"//                 pm.request.headers.upsert({\r",
					"//                     key: \"Authorization\",\r",
					"//                     value: `Bearer ${data.access_token}`\r",
					"//                 });\r",
					"//                 console.log(\"Authorization header updated with new token!\");\r",
					"//             } else {\r",
					"//                 console.error(\"❌ Refresh failed → need login again\");\r",
					"//                 pm.environment.unset(\"access_token\");\r",
					"//                 pm.environment.unset(\"refresh_token\");\r",
					"//                 pm.environment.unset(\"token_time\");\r",
					"//             }\r",
					"//         } catch (e) {\r",
					"//             console.error(\"❌ Failed to parse refresh response:\", e);\r",
					"//         }\r",
					"//     });\r",
					"// } else {\r",
					"//     console.log(\">>>>>> Access token still valid, no refresh needed\");\r",
					"\r",
					"//     // Обновление Authorization из текущей переменной\r",
					"//     let access = pm.environment.get(\"access_token\");\r",
					"//     if (access) {\r",
					"//         pm.request.headers.upsert({\r",
					"//             key: \"Authorization\",\r",
					"//             value: `Bearer ${access}`\r",
					"//         });\r",
					"//         console.log(\"Authorization header set from environment token\");\r",
					"//     } else {\r",
					"//         console.warn(\"No access_token found in environment\");\r",
					"//     }\r",
					"// }\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"// /**\r",
					"//  * Pre-request script description:\r",
					"//  *\r",
					"//  * This script checks if the current `access_token` has expired \r",
					"//  * (lifetime = 15 minutes, with a 14-minute safety margin).\r",
					"//  *\r",
					"//  * - If expired → it automatically sends a `POST /api/auth/refresh_token`\r",
					"//  *   request with the current `refresh_token`.\r",
					"//  *\r",
					"//  * - If the refresh succeeds → new `access_token`, `refresh_token`,\r",
					"//  *   and `token_time` are saved to Postman environment variables.\r",
					"//  *\r",
					"//  * - If the refresh fails → all token variables are cleared,\r",
					"//  *   and you need to log in again.\r",
					"//  */\r",
					"\r",
					"// const ACCESS_LIFETIME = 14 * 60 * 1000; // 14 мін (трохи меньше реальних 15)\r",
					"// let tokenTime = parseInt(pm.environment.get(\"token_time\") || \"0\");\r",
					"// let now = Date.now();\r",
					"\r",
					"// // Перевіряємо, якщо Аксес протух\r",
					"// if (now - tokenTime > ACCESS_LIFETIME) {\r",
					"//     console.log(\"Access expired → trying refresh...\");\r",
					"\r",
					"//     pm.sendRequest({\r",
					"//         url: pm.environment.get(\"base_url\") + \"/api/auth/refresh_token\",\r",
					"//         method: \"POST\",\r",
					"//         header: { \"Content-Type\": \"application/json\" },\r",
					"//         body: {\r",
					"//             mode: \"raw\",\r",
					"//             raw: JSON.stringify({\r",
					"//                 refresh_token: pm.environment.get(\"refresh_token\")\r",
					"//             })\r",
					"//         }\r",
					"//     }, function (err, res) {\r",
					"//         if (err) {\r",
					"//             console.error(\"Refresh request failed:\", err);\r",
					"//             return;\r",
					"//         }\r",
					"\r",
					"//         if (res.code === 200) {\r",
					"//             let data = res.json();\r",
					"//             pm.environment.set(\"access_token\", data.access_token);\r",
					"//             pm.environment.set(\"refresh_token\", data.refresh_token);\r",
					"//             pm.environment.set(\"token_time\", Date.now());\r",
					"//             console.log(\"Tokens refreshed!\");\r",
					"//         } else {\r",
					"//             console.error(\"Refresh failed → refresh token invalid/expired. Need login again.\");\r",
					"//             pm.environment.unset(\"access_token\");\r",
					"//             pm.environment.unset(\"refresh_token\");\r",
					"//             pm.environment.unset(\"token_time\");\r",
					"//         }\r",
					"//     });\r",
					"// }\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}